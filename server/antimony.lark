
var_name : NAME
name_in_comp : var_name "in" var_name


reaction : [name_in_comp ":"] reactants ARROW products ";" rate_law [";"]
reactants : species ("+" species)*
products : species ("+" species)*
species : [NUMBER] var_name
?rate_law : sum
ARROW : "->"
    | "=>"


assignment : name_in_comp "=" sum


annotation : var_name annot_keyword ESCAPED_STRING
annot_keyword : "identity"      -> identity
    | "hasPart"                 -> has_part
cvterm


declaration : declaration_modifier declaration_unit ("," declaration_unit)*
declaration_modifier = var_modifier
    | var_type
    | var_modifier var_type
declaration_unit : name_in_comp ["=" sum]

var_modifier : "var"            -> var
    | "const"                   -> const
var_type : "species"            -> species
    | "compartment"             -> compartment
    | "formula"                 -> formula


?sum : product
    | sum "+" product           -> add
    | sum "-" product           -> sub

?product : exponential
    | product "*" exponential   -> mul
    | product "/" exponential   -> div

?exponential: atom
    | exponential "^" atom      -> exp

?atom : NUMBER                  -> number
    | NAME                      -> var
    | "-" atom                  -> neg
    | "(" sum ")"


full_statement : [statement] STATEMENT_SEP
?statement : reaction
    | assignment
    | declaration
    | annotation
STATEMENT_SEP : _NL
    | ";"


// For some reason we need to have at least one full_statement in the model, even if it is just
// a newline or a semicolon
model : ("model" | "module") NAME full_statement+ "end"


root : (full_statement | model)*


_NL: NEWLINE


%import common.CNAME -> NAME
%import common.NUMBER
%import common.DIGIT
%import common.LETTER
%import common.WS
%import common.WS_INLINE
%import common.NEWLINE
%import common.ESCAPED_STRING
%ignore WS_INLINE
