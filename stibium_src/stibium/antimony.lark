
var_name : ["$"] NAME
in_comp : "in" var_name
maybein : var_name [in_comp]

reaction_name : maybein ":"
reaction : [reaction_name] reactants ARROW products ";" rate_law [in_comp]
reactants : species ("+" species)*
products : species ("+" species)*
species : [NUMBER] var_name
?rate_law : sum
ARROW : "->"
    | "=>"

assignment : maybein "=" sum

annotation : var_name annot_keyword ESCAPED_STRING
annot_keyword : "identity"      -> identity
    | "hasPart"                 -> has_part


declaration : declaration_modifiers declaration_item ("," declaration_item)*
declaration_modifiers : var_modifier
    | var_type
    | var_modifier var_type
declaration_item : maybein [decl_assignment]
decl_assignment : "=" sum

var_modifier : "var"            -> var
    | "const"                   -> const
var_type : "species"            -> species
    | "compartment"             -> compartment
    | "formula"                 -> formula


?sum : product
    | sum "+" product           -> add
    | sum "-" product           -> sub

?product : exponential
    | product "*" exponential   -> mul
    | product "/" exponential   -> div

?exponential: atom
    | exponential "^" atom      -> exp

?atom : NUMBER                  -> number
    | NAME                      -> var
    | "-" atom                  -> neg
    | "(" sum ")"


?suite : [statement] END_MARKER
?statement : reaction
    | assignment
    | declaration
    | annotation
END_MARKER : _NL
    | ";"


// For some reason we need to have at least one suite in the model, even if it is just
// a newline or a semicolon
model : ("model" | "module") NAME suite+ "end"


root : (suite | model)*


_NL: NEWLINE


%import common.CNAME -> NAME
%import common.NUMBER
%import common.DIGIT
%import common.LETTER
%import common.WS
%import common.WS_INLINE
%import common.NEWLINE
%import common.ESCAPED_STRING
%ignore WS_INLINE
