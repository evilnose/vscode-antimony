
# import statement needed on some systems
import sys
import os.path
import inspect
try: 
  _filename = inspect.getframeinfo(inspect.currentframe()).filename
except:
  _filename = __file__
_path = os.path.dirname(os.path.abspath(_filename))
if not _path in sys.path:
  sys.path.append(_path)

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libcombine')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libcombine')
    _libcombine = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libcombine', [dirname(__file__)])
        except ImportError:
            import _libcombine
            return _libcombine
        try:
            _mod = imp.load_module('_libcombine', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libcombine = swig_import_helper()
    del swig_import_helper
else:
    import _libcombine
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libcombine.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libcombine.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libcombine.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libcombine.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libcombine.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libcombine.SwigPyIterator_copy(self)

    def next(self):
        return _libcombine.SwigPyIterator_next(self)

    def __next__(self):
        return _libcombine.SwigPyIterator___next__(self)

    def previous(self):
        return _libcombine.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libcombine.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libcombine.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libcombine.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libcombine.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libcombine.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libcombine.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libcombine.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libcombine.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ASTNodeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASTNodeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ASTNodeList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libcombine.new_ASTNodeList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_ASTNodeList
    __del__ = lambda self: None

    def add(self, item):
        return _libcombine.ASTNodeList_add(self, item)

    def get(self, n):
        return _libcombine.ASTNodeList_get(self, n)

    def prepend(self, item):
        return _libcombine.ASTNodeList_prepend(self, item)

    def remove(self, n):
        return _libcombine.ASTNodeList_remove(self, n)

    def getSize(self):
        return _libcombine.ASTNodeList_getSize(self)
ASTNodeList_swigregister = _libcombine.ASTNodeList_swigregister
ASTNodeList_swigregister(ASTNodeList)

class CaNamespacesList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaNamespacesList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaNamespacesList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libcombine.new_CaNamespacesList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_CaNamespacesList
    __del__ = lambda self: None

    def add(self, item):
        return _libcombine.CaNamespacesList_add(self, item)

    def get(self, n):
        return _libcombine.CaNamespacesList_get(self, n)

    def prepend(self, item):
        return _libcombine.CaNamespacesList_prepend(self, item)

    def remove(self, n):
        return _libcombine.CaNamespacesList_remove(self, n)

    def getSize(self):
        return _libcombine.CaNamespacesList_getSize(self)
CaNamespacesList_swigregister = _libcombine.CaNamespacesList_swigregister
CaNamespacesList_swigregister(CaNamespacesList)

class CaBaseList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaBaseList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaBaseList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libcombine.new_CaBaseList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_CaBaseList
    __del__ = lambda self: None

    def add(self, item):
        return _libcombine.CaBaseList_add(self, item)

    def get(self, n):
        return _libcombine.CaBaseList_get(self, n)

    def prepend(self, item):
        return _libcombine.CaBaseList_prepend(self, item)

    def remove(self, n):
        return _libcombine.CaBaseList_remove(self, n)

    def getSize(self):
        return _libcombine.CaBaseList_getSize(self)
CaBaseList_swigregister = _libcombine.CaBaseList_swigregister
CaBaseList_swigregister(CaBaseList)

class SBaseList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBaseList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBaseList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libcombine.new_SBaseList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_SBaseList
    __del__ = lambda self: None

    def add(self, item):
        return _libcombine.SBaseList_add(self, item)

    def get(self, n):
        return _libcombine.SBaseList_get(self, n)

    def prepend(self, item):
        return _libcombine.SBaseList_prepend(self, item)

    def remove(self, n):
        return _libcombine.SBaseList_remove(self, n)

    def getSize(self):
        return _libcombine.SBaseList_getSize(self)
SBaseList_swigregister = _libcombine.SBaseList_swigregister
SBaseList_swigregister(SBaseList)



class AutoProperty(type):
    """
    A metaclass for automatically detecting getX/setX methods at class creation
    time (not instantiation), and adding properties (directly calling C methods
    where possible) to the class dictionary.
    """
    def __new__(cls, classname, bases, classdict):
        """
        Iterate over the items in the classdict looking for get/set pairs
        and declaring them as properties.
        """

        import re
        import keyword

        re_mangle = re.compile(r'[A-Za-z][a-z]+|[A-Z]+(?=$|[A-Z0-9])|\d+')
        re_id = re.compile(r'^[A-Za-z_][A-Za-z0-9_]*$')
        re_getdoc = re.compile(r'^\s*[A-Za-z_][A-Za-z0-9_]*\(self\)')
        re_setdoc = re.compile(r'^\s*[A-Za-z_][A-Za-z0-9_]*\(self,[^,)]+\)')

#convert ACapitalCasedStringXYZ123 -> a_capital_cased_string_xyz_123
        mangle_name = lambda x: ('_'.join(re_mangle.findall(x))).lower()

        get_methods = set()
        set_methods = set()
        swig_setter = classdict.get('__swig_setmethods__', {})

#only search for get/set methods
#we assume that any unset method also has either get or set
#a small number of set without get cases exist so we can't only
#search for get methods
        for k, v in classdict.items():
            name = k[3:]
            prefix = k[:3]
            mangled = mangle_name(name)
            if name:
                if callable(v):
                    if re_id.match(mangled) and mangled not in keyword.kwlist:
                        if prefix == 'get':
                            get_methods.add(name)
                        elif prefix == 'set':
                            set_methods.add(name)

        for name in get_methods | set_methods:

            mangled = mangle_name(name)

#ListOfFoobars -> foobars
            if mangled.startswith('list_of_'):
                mangled = mangled[8:]

            getter = setter = deleter = None
            if name in get_methods:
                getter = classdict['get'+name]

#this is a very dirty way of checking if the get method
#requires extra arguments (and hence cannot be a property)
#it should be possible to do this properly in SWIG?
                if getter.__doc__:
                    if not re_getdoc.match(getter.__doc__):
                        continue

#use the c-level get function if the python function
#only consists of a call to it
                cname = classname + '_get' + name
#test if function is "return _libsbml.CLASS_getNAME(__args__)"
                if getter.func_code.co_names == ('_libsbml', cname):
                    getter = getattr(_libsbml, cname)

            if name in set_methods:
                setter = classdict['set'+name]
                if setter.__doc__:
                    if not re_setdoc.match(setter.__doc__):
                        continue

                cname = classname + '_set' + name
                if setter.func_code.co_names == ('_libsbml', cname):
                    setter = getattr(_libsbml, cname)
#property fget does not get intercepted by __getattr__
#but fset does, so we implement property setting via
#the __swig_setmethods__ dict
                swig_setter[mangled] = setter

            if 'unset' + name in classdict:
                deleter = classdict['unset'+name]
                if deleter.__doc__:
#like a get method, a delete method should
#only require a self argument
                    if not re_getdoc.match(deleter.__doc__):
                        continue

                cname = classname + '_unset' + name
                if deleter.func_code.co_names == ('_libsbml', cname):
                    deleter = getattr(_libsbml, cname)

            if getter or setter or deleter:
#fset is technically redundant since the method is dispatched
#via _swig_setattr rather than through the property due to that
#function not delegating to object.__setattr__ which properly
#handles properties
                classdict[mangled] = property(fget=getter, fset=setter, fdel=deleter)

            def __repr__(self):
                desc = self.__class__.__name__
                if hasattr(self, '__len__'):
                    desc += '[%s]' % self.__len__()
                if hasattr(self, 'id') and self.id:
                    desc += ' %s' % self.id
                if hasattr(self, 'name') and self.name:
                    desc += ' "%s"' % self.name
                return '<' + desc + '>'

            if classdict.get('__repr__', None) in (_swig_repr, None):
                classdict['__repr__'] = __repr__


        return type.__new__(cls, classname, bases, classdict)


class string(_object):
    """Proxy of C++ std::basic_string<(char)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr

    def length(self):
        """length(string self) -> std::basic_string< char >::size_type"""
        return _libcombine.string_length(self)


    def max_size(self):
        """max_size(string self) -> std::basic_string< char >::size_type"""
        return _libcombine.string_max_size(self)


    def copy(self, __s, __n, __pos=0):
        """
        copy(string self, char * __s, std::basic_string< char >::size_type __n, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type
        copy(string self, char * __s, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type
        """
        return _libcombine.string_copy(self, __s, __n, __pos)


    def c_str(self):
        """c_str(string self) -> char const *"""
        return _libcombine.string_c_str(self)


    def find(self, *args):
        """
        find(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type
        find(string self, string __str, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type
        find(string self, string __str) -> std::basic_string< char >::size_type
        find(string self, char __c, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type
        find(string self, char __c) -> std::basic_string< char >::size_type
        """
        return _libcombine.string_find(self, *args)


    def rfind(self, *args):
        """
        rfind(string self, string __str, std::basic_string< char >::size_type __pos) -> std::basic_string< char >::size_type
        rfind(string self, string __str) -> std::basic_string< char >::size_type
        rfind(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type
        rfind(string self, char __c, std::basic_string< char >::size_type __pos) -> std::basic_string< char >::size_type
        rfind(string self, char __c) -> std::basic_string< char >::size_type
        """
        return _libcombine.string_rfind(self, *args)


    def find_first_of(self, *args):
        """
        find_first_of(string self, string __str, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type
        find_first_of(string self, string __str) -> std::basic_string< char >::size_type
        find_first_of(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type
        find_first_of(string self, char __c, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type
        find_first_of(string self, char __c) -> std::basic_string< char >::size_type
        """
        return _libcombine.string_find_first_of(self, *args)


    def find_last_of(self, *args):
        """
        find_last_of(string self, string __str, std::basic_string< char >::size_type __pos) -> std::basic_string< char >::size_type
        find_last_of(string self, string __str) -> std::basic_string< char >::size_type
        find_last_of(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type
        find_last_of(string self, char __c, std::basic_string< char >::size_type __pos) -> std::basic_string< char >::size_type
        find_last_of(string self, char __c) -> std::basic_string< char >::size_type
        """
        return _libcombine.string_find_last_of(self, *args)


    def find_first_not_of(self, *args):
        """
        find_first_not_of(string self, string __str, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type
        find_first_not_of(string self, string __str) -> std::basic_string< char >::size_type
        find_first_not_of(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type
        find_first_not_of(string self, char __c, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type
        find_first_not_of(string self, char __c) -> std::basic_string< char >::size_type
        """
        return _libcombine.string_find_first_not_of(self, *args)


    def find_last_not_of(self, *args):
        """
        find_last_not_of(string self, string __str, std::basic_string< char >::size_type __pos) -> std::basic_string< char >::size_type
        find_last_not_of(string self, string __str) -> std::basic_string< char >::size_type
        find_last_not_of(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type
        find_last_not_of(string self, char __c, std::basic_string< char >::size_type __pos) -> std::basic_string< char >::size_type
        find_last_not_of(string self, char __c) -> std::basic_string< char >::size_type
        """
        return _libcombine.string_find_last_not_of(self, *args)


    def substr(self, *args):
        """
        substr(string self, std::basic_string< char >::size_type __pos=0, std::basic_string< char >::size_type __n) -> string
        substr(string self, std::basic_string< char >::size_type __pos=0) -> string
        substr(string self) -> string
        """
        return _libcombine.string_substr(self, *args)


    def empty(self):
        """empty(string self) -> bool"""
        return _libcombine.string_empty(self)


    def size(self):
        """size(string self) -> std::basic_string< char >::size_type"""
        return _libcombine.string_size(self)


    def swap(self, v):
        """swap(string self, string v)"""
        return _libcombine.string_swap(self, v)


    def erase(self, *args):
        """
        erase(string self, std::basic_string< char >::size_type __pos=0, std::basic_string< char >::size_type __n) -> string
        erase(string self, std::basic_string< char >::size_type __pos=0) -> string
        erase(string self) -> string
        erase(string self, std::basic_string< char >::iterator pos) -> std::basic_string< char >::iterator
        erase(string self, std::basic_string< char >::iterator first, std::basic_string< char >::iterator last) -> std::basic_string< char >::iterator
        """
        return _libcombine.string_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::basic_string<(char)> self, char const * __s, std::basic_string< char >::size_type __n) -> string
        __init__(std::basic_string<(char)> self) -> string
        __init__(std::basic_string<(char)> self, string arg2) -> string
        __init__(std::basic_string<(char)> self, std::basic_string< char >::size_type size, std::basic_string< char >::value_type value) -> string
        """
        this = _libcombine.new_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(string self, string __str) -> string
        assign(string self, string __str, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> string
        assign(string self, char const * __s, std::basic_string< char >::size_type __n) -> string
        assign(string self, std::basic_string< char >::size_type n, std::basic_string< char >::value_type x)
        """
        return _libcombine.string_assign(self, *args)


    def resize(self, *args):
        """
        resize(string self, std::basic_string< char >::size_type new_size)
        resize(string self, std::basic_string< char >::size_type new_size, std::basic_string< char >::value_type x)
        """
        return _libcombine.string_resize(self, *args)


    def iterator(self):
        """iterator(string self) -> SwigPyIterator"""
        return _libcombine.string_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(string self) -> bool"""
        return _libcombine.string___nonzero__(self)


    def __bool__(self):
        """__bool__(string self) -> bool"""
        return _libcombine.string___bool__(self)


    def __len__(self):
        """__len__(string self) -> std::basic_string< char >::size_type"""
        return _libcombine.string___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::difference_type j) -> string"""
        return _libcombine.string___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::difference_type j)
        __setslice__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::difference_type j, string v)
        """
        return _libcombine.string___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::difference_type j)"""
        return _libcombine.string___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(string self, std::basic_string< char >::difference_type i)
        __delitem__(string self, PySliceObject * slice)
        """
        return _libcombine.string___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(string self, PySliceObject * slice) -> string
        __getitem__(string self, std::basic_string< char >::difference_type i) -> std::basic_string< char >::value_type
        """
        return _libcombine.string___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(string self, PySliceObject * slice, string v)
        __setitem__(string self, PySliceObject * slice)
        __setitem__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::value_type x)
        """
        return _libcombine.string___setitem__(self, *args)


    def insert(self, *args):
        """
        insert(string self, std::basic_string< char >::size_type __pos1, string __str) -> string
        insert(string self, std::basic_string< char >::size_type __pos1, string __str, std::basic_string< char >::size_type __pos2, std::basic_string< char >::size_type __n) -> string
        insert(string self, std::basic_string< char >::size_type __pos, char const * __s, std::basic_string< char >::size_type __n) -> string
        insert(string self, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n, char __c) -> string
        insert(string self, std::basic_string< char >::iterator pos, std::basic_string< char >::value_type x) -> std::basic_string< char >::iterator
        insert(string self, std::basic_string< char >::iterator pos, std::basic_string< char >::size_type n, std::basic_string< char >::value_type x)
        insert(string self, std::basic_string< char >::iterator __p, std::basic_string< char >::size_type __n, char __c)
        """
        return _libcombine.string_insert(self, *args)


    def replace(self, *args):
        """
        replace(string self, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n, string __str) -> string
        replace(string self, std::basic_string< char >::size_type __pos1, std::basic_string< char >::size_type __n1, string __str, std::basic_string< char >::size_type __pos2, std::basic_string< char >::size_type __n2) -> string
        replace(string self, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n1, char const * __s, std::basic_string< char >::size_type __n2) -> string
        replace(string self, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n1, std::basic_string< char >::size_type __n2, char __c) -> string
        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, string __str) -> string
        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, char const * __s, std::basic_string< char >::size_type __n) -> string
        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, std::basic_string< char >::size_type __n, char __c) -> string
        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, char const * __k1, char const * __k2) -> string
        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, std::basic_string< char >::const_iterator __k1, std::basic_string< char >::const_iterator __k2) -> string
        """
        return _libcombine.string_replace(self, *args)


    def __iadd__(self, v):
        """__iadd__(string self, string v) -> string"""
        return _libcombine.string___iadd__(self, v)


    def __add__(self, v):
        """__add__(string self, string v) -> string"""
        return _libcombine.string___add__(self, v)


    def __radd__(self, v):
        """__radd__(string self, string v) -> string"""
        return _libcombine.string___radd__(self, v)


    def __str__(self):
        """__str__(string self) -> string"""
        return _libcombine.string___str__(self)


    def __rlshift__(self, out):
        """__rlshift__(string self, ostream out) -> ostream"""
        return _libcombine.string___rlshift__(self, out)


    def __eq__(self, v):
        """__eq__(string self, string v) -> bool"""
        return _libcombine.string___eq__(self, v)


    def __ne__(self, v):
        """__ne__(string self, string v) -> bool"""
        return _libcombine.string___ne__(self, v)


    def __gt__(self, v):
        """__gt__(string self, string v) -> bool"""
        return _libcombine.string___gt__(self, v)


    def __lt__(self, v):
        """__lt__(string self, string v) -> bool"""
        return _libcombine.string___lt__(self, v)


    def __ge__(self, v):
        """__ge__(string self, string v) -> bool"""
        return _libcombine.string___ge__(self, v)


    def __le__(self, v):
        """__le__(string self, string v) -> bool"""
        return _libcombine.string___le__(self, v)

    __swig_destroy__ = _libcombine.delete_string
    __del__ = lambda self: None
string_swigregister = _libcombine.string_swigregister
string_swigregister(string)
cvar = _libcombine.cvar
string.npos = _libcombine.cvar.string_npos

class ostream(_object):
    """Proxy of C++ std::basic_ostream<(char)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        """__init__(std::basic_ostream<(char)> self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ostream"""
        this = _libcombine.new_ostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_ostream
    __del__ = lambda self: None
ostream_swigregister = _libcombine.ostream_swigregister
ostream_swigregister(ostream)

class ostringstream(ostream):
    """Proxy of C++ std::basic_ostringstream<(char)> class."""

    __swig_setmethods__ = {}
    for _s in [ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostringstream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(std::basic_ostringstream<(char)> self, std::ios_base::openmode __mode) -> ostringstream
        __init__(std::basic_ostringstream<(char)> self) -> ostringstream
        """
        this = _libcombine.new_ostringstream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_ostringstream
    __del__ = lambda self: None

    def str(self, *args):
        """
        str(ostringstream self) -> string
        str(ostringstream self, string __s)
        """
        return _libcombine.ostringstream_str(self, *args)

ostringstream_swigregister = _libcombine.ostringstream_swigregister
ostringstream_swigregister(ostringstream)


def endl(arg1):
    """endl(ostream arg1) -> ostream"""
    return _libcombine.endl(arg1)

def flush(arg1):
    """flush(ostream arg1) -> ostream"""
    return _libcombine.flush(arg1)

import sys
import os.path

# @cond doxygen-libsedml-internal

def conditional_abspath (filename):
  """conditional_abspath (filename) -> filename

  Returns filename with an absolute path prepended, if necessary.
  Some combinations of platforms and underlying XML parsers *require*
  an absolute path to a filename while others do not.  This function
  encapsulates the appropriate logic.  It is used by readCaML() and
  CaReader.readCaML().
  """
  if sys.platform.find('cygwin') != -1:
    return filename
  else:
    return os.path.abspath(filename)

# @endcond


def readOMEX(*args):
  """
  readOMEX(self, string filename) -> CaOmexManifest

  Reads an SEDML document from a file.

  This method is identical to readOMEXFromFile().

  If the file named 'filename' does not exist or its content is not
  valid SEDML, one or more errors will be logged with the CaOmexManifest
  object returned by this method.  Callers can use the methods on
  CaOmexManifest such as CaOmexManifest.getNumErrors() and
  CaOmexManifest.getError() to get the errors.  The object returned by
  CaOmexManifest.getError() is an CaError object, and it has methods to
  get the error code, category, and severity level of the problem, as
  well as a textual description of the problem.  The possible severity
  levels range from informational messages to fatal errors; see the
  documentation for CaError for more information.

  If the file 'filename' could not be read, the file-reading error will
  appear first.  The error code can provide a clue about what happened.
  For example, a file might be unreadable (either because it does not
  actually exist or because the user does not have the necessary access
  priviledges to read it) or some sort of file operation error may have
  been reported by the underlying operating system.  Callers can check
  for these situations using a program fragment such as the following:

   reader = CaReader()
   doc    = reader.readOMEX(filename)

   if doc.getNumErrors() > 0:
     if doc.getError(0).getErrorId() == libsedml.XMLFileUnreadable:
# Handle case of unreadable file here.
     elif doc.getError(0).getErrorId() == libsedml.XMLFileOperationError:
# Handle case of other file error here.
     else:
# Handle other error cases here.

  If the given filename ends with the suffix \".gz\" (for example,
  \"myfile.xml.gz\"), the file is assumed to be compressed in gzip format
  and will be automatically decompressed upon reading.  Similarly, if the
  given filename ends with \".zip\" or \".bz2\", the file is assumed to be
  compressed in zip or bzip2 format (respectively).  Files whose names
  lack these suffixes will be read uncompressed.  Note that if the file
  is in zip format but the archive contains more than one file, only the
  first file in the archive will be read and the rest ignored.

  To read a gzip/zip file, libSEDML needs to be configured and linked with
  the zlib library at compile time.  It also needs to be linked with the
  bzip2 library to read files in bzip2 format.  (Both of these are the
  default configurations for libSEDML.)  Errors about unreadable files
  will be logged if a compressed filename is given and libSEDML was not
  linked with the corresponding required library.

  Parameter 'filename is the name or full pathname of the file to be
  read.

  Returns a pointer to the CaOmexManifest created from the SEDML content.

  See also CaError.

  Note:

  LibSEDML versions 2.x and later versions behave differently in
  error handling in several respects.  One difference is how early some
  errors are caught and whether libSEDML continues processing a file in
  the face of some early errors.  In general, libSEDML versions after 2.x
  stop parsing SEDML inputs sooner than libSEDML version 2.x in the face
  of XML errors, because the errors may invalidate any further SEDML
  content.  For example, a missing XML declaration at the beginning of
  the file was ignored by libSEDML 2.x but in version 3.x and later, it
  will cause libSEDML to stop parsing the rest of the input altogether.
  While this behavior may seem more severe and intolerant, it was
  necessary in order to provide uniform behavior regardless of which
  underlying XML parser (Expat, Xerces, libxml2) is being used by
  libSEDML.  The XML parsers themselves behave differently in their error
  reporting, and sometimes libSEDML has to resort to the lowest common
  denominator.
  """
  reader = CaReader()
  return reader.readOMEX(args[0])

class DoubleStdVector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(DoubleStdVector self) -> SwigPyIterator"""
        return _libcombine.DoubleStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(DoubleStdVector self) -> bool"""
        return _libcombine.DoubleStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(DoubleStdVector self) -> bool"""
        return _libcombine.DoubleStdVector___bool__(self)


    def __len__(self):
        """__len__(DoubleStdVector self) -> std::vector< double >::size_type"""
        return _libcombine.DoubleStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(DoubleStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleStdVector"""
        return _libcombine.DoubleStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DoubleStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(DoubleStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleStdVector v)
        """
        return _libcombine.DoubleStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(DoubleStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _libcombine.DoubleStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DoubleStdVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleStdVector self, PySliceObject * slice)
        """
        return _libcombine.DoubleStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DoubleStdVector self, PySliceObject * slice) -> DoubleStdVector
        __getitem__(DoubleStdVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _libcombine.DoubleStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DoubleStdVector self, PySliceObject * slice, DoubleStdVector v)
        __setitem__(DoubleStdVector self, PySliceObject * slice)
        __setitem__(DoubleStdVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _libcombine.DoubleStdVector___setitem__(self, *args)


    def pop(self):
        """pop(DoubleStdVector self) -> std::vector< double >::value_type"""
        return _libcombine.DoubleStdVector_pop(self)


    def append(self, x):
        """append(DoubleStdVector self, std::vector< double >::value_type const & x)"""
        return _libcombine.DoubleStdVector_append(self, x)


    def empty(self):
        """empty(DoubleStdVector self) -> bool"""
        return _libcombine.DoubleStdVector_empty(self)


    def size(self):
        """size(DoubleStdVector self) -> std::vector< double >::size_type"""
        return _libcombine.DoubleStdVector_size(self)


    def swap(self, v):
        """swap(DoubleStdVector self, DoubleStdVector v)"""
        return _libcombine.DoubleStdVector_swap(self, v)


    def begin(self):
        """begin(DoubleStdVector self) -> std::vector< double >::iterator"""
        return _libcombine.DoubleStdVector_begin(self)


    def end(self):
        """end(DoubleStdVector self) -> std::vector< double >::iterator"""
        return _libcombine.DoubleStdVector_end(self)


    def rbegin(self):
        """rbegin(DoubleStdVector self) -> std::vector< double >::reverse_iterator"""
        return _libcombine.DoubleStdVector_rbegin(self)


    def rend(self):
        """rend(DoubleStdVector self) -> std::vector< double >::reverse_iterator"""
        return _libcombine.DoubleStdVector_rend(self)


    def clear(self):
        """clear(DoubleStdVector self)"""
        return _libcombine.DoubleStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(DoubleStdVector self) -> std::vector< double >::allocator_type"""
        return _libcombine.DoubleStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(DoubleStdVector self)"""
        return _libcombine.DoubleStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(DoubleStdVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleStdVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _libcombine.DoubleStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> DoubleStdVector
        __init__(std::vector<(double)> self, DoubleStdVector arg2) -> DoubleStdVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleStdVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleStdVector
        """
        this = _libcombine.new_DoubleStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(DoubleStdVector self, std::vector< double >::value_type const & x)"""
        return _libcombine.DoubleStdVector_push_back(self, x)


    def front(self):
        """front(DoubleStdVector self) -> std::vector< double >::value_type const &"""
        return _libcombine.DoubleStdVector_front(self)


    def back(self):
        """back(DoubleStdVector self) -> std::vector< double >::value_type const &"""
        return _libcombine.DoubleStdVector_back(self)


    def assign(self, n, x):
        """assign(DoubleStdVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _libcombine.DoubleStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DoubleStdVector self, std::vector< double >::size_type new_size)
        resize(DoubleStdVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _libcombine.DoubleStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(DoubleStdVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleStdVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _libcombine.DoubleStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(DoubleStdVector self, std::vector< double >::size_type n)"""
        return _libcombine.DoubleStdVector_reserve(self, n)


    def capacity(self):
        """capacity(DoubleStdVector self) -> std::vector< double >::size_type"""
        return _libcombine.DoubleStdVector_capacity(self)

    __swig_destroy__ = _libcombine.delete_DoubleStdVector
    __del__ = lambda self: None
DoubleStdVector_swigregister = _libcombine.DoubleStdVector_swigregister
DoubleStdVector_swigregister(DoubleStdVector)
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class XmlErrorStdVector(_object):
    """Proxy of C++ std::vector<(p.XMLError)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlErrorStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlErrorStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(XmlErrorStdVector self) -> SwigPyIterator"""
        return _libcombine.XmlErrorStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(XmlErrorStdVector self) -> bool"""
        return _libcombine.XmlErrorStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(XmlErrorStdVector self) -> bool"""
        return _libcombine.XmlErrorStdVector___bool__(self)


    def __len__(self):
        """__len__(XmlErrorStdVector self) -> std::vector< XMLError * >::size_type"""
        return _libcombine.XmlErrorStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(XmlErrorStdVector self, std::vector< XMLError * >::difference_type i, std::vector< XMLError * >::difference_type j) -> XmlErrorStdVector"""
        return _libcombine.XmlErrorStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(XmlErrorStdVector self, std::vector< XMLError * >::difference_type i, std::vector< XMLError * >::difference_type j)
        __setslice__(XmlErrorStdVector self, std::vector< XMLError * >::difference_type i, std::vector< XMLError * >::difference_type j, XmlErrorStdVector v)
        """
        return _libcombine.XmlErrorStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(XmlErrorStdVector self, std::vector< XMLError * >::difference_type i, std::vector< XMLError * >::difference_type j)"""
        return _libcombine.XmlErrorStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(XmlErrorStdVector self, std::vector< XMLError * >::difference_type i)
        __delitem__(XmlErrorStdVector self, PySliceObject * slice)
        """
        return _libcombine.XmlErrorStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(XmlErrorStdVector self, PySliceObject * slice) -> XmlErrorStdVector
        __getitem__(XmlErrorStdVector self, std::vector< XMLError * >::difference_type i) -> XMLError
        """
        return _libcombine.XmlErrorStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(XmlErrorStdVector self, PySliceObject * slice, XmlErrorStdVector v)
        __setitem__(XmlErrorStdVector self, PySliceObject * slice)
        __setitem__(XmlErrorStdVector self, std::vector< XMLError * >::difference_type i, XMLError x)
        """
        return _libcombine.XmlErrorStdVector___setitem__(self, *args)


    def pop(self):
        """pop(XmlErrorStdVector self) -> XMLError"""
        return _libcombine.XmlErrorStdVector_pop(self)


    def append(self, x):
        """append(XmlErrorStdVector self, XMLError x)"""
        return _libcombine.XmlErrorStdVector_append(self, x)


    def empty(self):
        """empty(XmlErrorStdVector self) -> bool"""
        return _libcombine.XmlErrorStdVector_empty(self)


    def size(self):
        """size(XmlErrorStdVector self) -> std::vector< XMLError * >::size_type"""
        return _libcombine.XmlErrorStdVector_size(self)


    def swap(self, v):
        """swap(XmlErrorStdVector self, XmlErrorStdVector v)"""
        return _libcombine.XmlErrorStdVector_swap(self, v)


    def begin(self):
        """begin(XmlErrorStdVector self) -> std::vector< XMLError * >::iterator"""
        return _libcombine.XmlErrorStdVector_begin(self)


    def end(self):
        """end(XmlErrorStdVector self) -> std::vector< XMLError * >::iterator"""
        return _libcombine.XmlErrorStdVector_end(self)


    def rbegin(self):
        """rbegin(XmlErrorStdVector self) -> std::vector< XMLError * >::reverse_iterator"""
        return _libcombine.XmlErrorStdVector_rbegin(self)


    def rend(self):
        """rend(XmlErrorStdVector self) -> std::vector< XMLError * >::reverse_iterator"""
        return _libcombine.XmlErrorStdVector_rend(self)


    def clear(self):
        """clear(XmlErrorStdVector self)"""
        return _libcombine.XmlErrorStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(XmlErrorStdVector self) -> std::vector< XMLError * >::allocator_type"""
        return _libcombine.XmlErrorStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(XmlErrorStdVector self)"""
        return _libcombine.XmlErrorStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(XmlErrorStdVector self, std::vector< XMLError * >::iterator pos) -> std::vector< XMLError * >::iterator
        erase(XmlErrorStdVector self, std::vector< XMLError * >::iterator first, std::vector< XMLError * >::iterator last) -> std::vector< XMLError * >::iterator
        """
        return _libcombine.XmlErrorStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.XMLError)> self) -> XmlErrorStdVector
        __init__(std::vector<(p.XMLError)> self, XmlErrorStdVector arg2) -> XmlErrorStdVector
        __init__(std::vector<(p.XMLError)> self, std::vector< XMLError * >::size_type size) -> XmlErrorStdVector
        __init__(std::vector<(p.XMLError)> self, std::vector< XMLError * >::size_type size, XMLError value) -> XmlErrorStdVector
        """
        this = _libcombine.new_XmlErrorStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(XmlErrorStdVector self, XMLError x)"""
        return _libcombine.XmlErrorStdVector_push_back(self, x)


    def front(self):
        """front(XmlErrorStdVector self) -> XMLError"""
        return _libcombine.XmlErrorStdVector_front(self)


    def back(self):
        """back(XmlErrorStdVector self) -> XMLError"""
        return _libcombine.XmlErrorStdVector_back(self)


    def assign(self, n, x):
        """assign(XmlErrorStdVector self, std::vector< XMLError * >::size_type n, XMLError x)"""
        return _libcombine.XmlErrorStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(XmlErrorStdVector self, std::vector< XMLError * >::size_type new_size)
        resize(XmlErrorStdVector self, std::vector< XMLError * >::size_type new_size, XMLError x)
        """
        return _libcombine.XmlErrorStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(XmlErrorStdVector self, std::vector< XMLError * >::iterator pos, XMLError x) -> std::vector< XMLError * >::iterator
        insert(XmlErrorStdVector self, std::vector< XMLError * >::iterator pos, std::vector< XMLError * >::size_type n, XMLError x)
        """
        return _libcombine.XmlErrorStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(XmlErrorStdVector self, std::vector< XMLError * >::size_type n)"""
        return _libcombine.XmlErrorStdVector_reserve(self, n)


    def capacity(self):
        """capacity(XmlErrorStdVector self) -> std::vector< XMLError * >::size_type"""
        return _libcombine.XmlErrorStdVector_capacity(self)

    __swig_destroy__ = _libcombine.delete_XmlErrorStdVector
    __del__ = lambda self: None
XmlErrorStdVector_swigregister = _libcombine.XmlErrorStdVector_swigregister
XmlErrorStdVector_swigregister(XmlErrorStdVector)

class CaErrorStdVector(_object):
    """Proxy of C++ std::vector<(CaError)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaErrorStdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaErrorStdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(CaErrorStdVector self) -> SwigPyIterator"""
        return _libcombine.CaErrorStdVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(CaErrorStdVector self) -> bool"""
        return _libcombine.CaErrorStdVector___nonzero__(self)


    def __bool__(self):
        """__bool__(CaErrorStdVector self) -> bool"""
        return _libcombine.CaErrorStdVector___bool__(self)


    def __len__(self):
        """__len__(CaErrorStdVector self) -> std::vector< CaError >::size_type"""
        return _libcombine.CaErrorStdVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(CaErrorStdVector self, std::vector< CaError >::difference_type i, std::vector< CaError >::difference_type j) -> CaErrorStdVector"""
        return _libcombine.CaErrorStdVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CaErrorStdVector self, std::vector< CaError >::difference_type i, std::vector< CaError >::difference_type j)
        __setslice__(CaErrorStdVector self, std::vector< CaError >::difference_type i, std::vector< CaError >::difference_type j, CaErrorStdVector v)
        """
        return _libcombine.CaErrorStdVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(CaErrorStdVector self, std::vector< CaError >::difference_type i, std::vector< CaError >::difference_type j)"""
        return _libcombine.CaErrorStdVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CaErrorStdVector self, std::vector< CaError >::difference_type i)
        __delitem__(CaErrorStdVector self, PySliceObject * slice)
        """
        return _libcombine.CaErrorStdVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CaErrorStdVector self, PySliceObject * slice) -> CaErrorStdVector
        __getitem__(CaErrorStdVector self, std::vector< CaError >::difference_type i) -> CaError
        """
        return _libcombine.CaErrorStdVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CaErrorStdVector self, PySliceObject * slice, CaErrorStdVector v)
        __setitem__(CaErrorStdVector self, PySliceObject * slice)
        __setitem__(CaErrorStdVector self, std::vector< CaError >::difference_type i, CaError x)
        """
        return _libcombine.CaErrorStdVector___setitem__(self, *args)


    def pop(self):
        """pop(CaErrorStdVector self) -> CaError"""
        return _libcombine.CaErrorStdVector_pop(self)


    def append(self, x):
        """append(CaErrorStdVector self, CaError x)"""
        return _libcombine.CaErrorStdVector_append(self, x)


    def empty(self):
        """empty(CaErrorStdVector self) -> bool"""
        return _libcombine.CaErrorStdVector_empty(self)


    def size(self):
        """size(CaErrorStdVector self) -> std::vector< CaError >::size_type"""
        return _libcombine.CaErrorStdVector_size(self)


    def swap(self, v):
        """swap(CaErrorStdVector self, CaErrorStdVector v)"""
        return _libcombine.CaErrorStdVector_swap(self, v)


    def begin(self):
        """begin(CaErrorStdVector self) -> std::vector< CaError >::iterator"""
        return _libcombine.CaErrorStdVector_begin(self)


    def end(self):
        """end(CaErrorStdVector self) -> std::vector< CaError >::iterator"""
        return _libcombine.CaErrorStdVector_end(self)


    def rbegin(self):
        """rbegin(CaErrorStdVector self) -> std::vector< CaError >::reverse_iterator"""
        return _libcombine.CaErrorStdVector_rbegin(self)


    def rend(self):
        """rend(CaErrorStdVector self) -> std::vector< CaError >::reverse_iterator"""
        return _libcombine.CaErrorStdVector_rend(self)


    def clear(self):
        """clear(CaErrorStdVector self)"""
        return _libcombine.CaErrorStdVector_clear(self)


    def get_allocator(self):
        """get_allocator(CaErrorStdVector self) -> std::vector< CaError >::allocator_type"""
        return _libcombine.CaErrorStdVector_get_allocator(self)


    def pop_back(self):
        """pop_back(CaErrorStdVector self)"""
        return _libcombine.CaErrorStdVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CaErrorStdVector self, std::vector< CaError >::iterator pos) -> std::vector< CaError >::iterator
        erase(CaErrorStdVector self, std::vector< CaError >::iterator first, std::vector< CaError >::iterator last) -> std::vector< CaError >::iterator
        """
        return _libcombine.CaErrorStdVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(CaError)> self) -> CaErrorStdVector
        __init__(std::vector<(CaError)> self, CaErrorStdVector arg2) -> CaErrorStdVector
        __init__(std::vector<(CaError)> self, std::vector< CaError >::size_type size) -> CaErrorStdVector
        __init__(std::vector<(CaError)> self, std::vector< CaError >::size_type size, CaError value) -> CaErrorStdVector
        """
        this = _libcombine.new_CaErrorStdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(CaErrorStdVector self, CaError x)"""
        return _libcombine.CaErrorStdVector_push_back(self, x)


    def front(self):
        """front(CaErrorStdVector self) -> CaError"""
        return _libcombine.CaErrorStdVector_front(self)


    def back(self):
        """back(CaErrorStdVector self) -> CaError"""
        return _libcombine.CaErrorStdVector_back(self)


    def assign(self, n, x):
        """assign(CaErrorStdVector self, std::vector< CaError >::size_type n, CaError x)"""
        return _libcombine.CaErrorStdVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CaErrorStdVector self, std::vector< CaError >::size_type new_size)
        resize(CaErrorStdVector self, std::vector< CaError >::size_type new_size, CaError x)
        """
        return _libcombine.CaErrorStdVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CaErrorStdVector self, std::vector< CaError >::iterator pos, CaError x) -> std::vector< CaError >::iterator
        insert(CaErrorStdVector self, std::vector< CaError >::iterator pos, std::vector< CaError >::size_type n, CaError x)
        """
        return _libcombine.CaErrorStdVector_insert(self, *args)


    def reserve(self, n):
        """reserve(CaErrorStdVector self, std::vector< CaError >::size_type n)"""
        return _libcombine.CaErrorStdVector_reserve(self, n)


    def capacity(self):
        """capacity(CaErrorStdVector self) -> std::vector< CaError >::size_type"""
        return _libcombine.CaErrorStdVector_capacity(self)

    __swig_destroy__ = _libcombine.delete_CaErrorStdVector
    __del__ = lambda self: None
CaErrorStdVector_swigregister = _libcombine.CaErrorStdVector_swigregister
CaErrorStdVector_swigregister(CaErrorStdVector)

class StringVector(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(StringVector self) -> SwigPyIterator"""
        return _libcombine.StringVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(StringVector self) -> bool"""
        return _libcombine.StringVector___nonzero__(self)


    def __bool__(self):
        """__bool__(StringVector self) -> bool"""
        return _libcombine.StringVector___bool__(self)


    def __len__(self):
        """__len__(StringVector self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _libcombine.StringVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j) -> StringVector"""
        return _libcombine.StringVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j)
        __setslice__(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j, StringVector v)
        """
        return _libcombine.StringVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j)"""
        return _libcombine.StringVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i)
        __delitem__(StringVector self, PySliceObject * slice)
        """
        return _libcombine.StringVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector
        __getitem__(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i) -> string
        """
        return _libcombine.StringVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)
        __setitem__(StringVector self, PySliceObject * slice)
        __setitem__(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, string x)
        """
        return _libcombine.StringVector___setitem__(self, *args)


    def pop(self):
        """pop(StringVector self) -> string"""
        return _libcombine.StringVector_pop(self)


    def append(self, x):
        """append(StringVector self, string x)"""
        return _libcombine.StringVector_append(self, x)


    def empty(self):
        """empty(StringVector self) -> bool"""
        return _libcombine.StringVector_empty(self)


    def size(self):
        """size(StringVector self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _libcombine.StringVector_size(self)


    def swap(self, v):
        """swap(StringVector self, StringVector v)"""
        return _libcombine.StringVector_swap(self, v)


    def begin(self):
        """begin(StringVector self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator"""
        return _libcombine.StringVector_begin(self)


    def end(self):
        """end(StringVector self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator"""
        return _libcombine.StringVector_end(self)


    def rbegin(self):
        """rbegin(StringVector self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator"""
        return _libcombine.StringVector_rbegin(self)


    def rend(self):
        """rend(StringVector self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator"""
        return _libcombine.StringVector_rend(self)


    def clear(self):
        """clear(StringVector self)"""
        return _libcombine.StringVector_clear(self)


    def get_allocator(self):
        """get_allocator(StringVector self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::allocator_type"""
        return _libcombine.StringVector_get_allocator(self)


    def pop_back(self):
        """pop_back(StringVector self)"""
        return _libcombine.StringVector_pop_back(self)


    def erase(self, *args):
        """
        erase(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        erase(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator first, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator last) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        """
        return _libcombine.StringVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> StringVector
        __init__(std::vector<(std::string)> self, StringVector arg2) -> StringVector
        __init__(std::vector<(std::string)> self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type size) -> StringVector
        __init__(std::vector<(std::string)> self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type size, string value) -> StringVector
        """
        this = _libcombine.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(StringVector self, string x)"""
        return _libcombine.StringVector_push_back(self, x)


    def front(self):
        """front(StringVector self) -> string"""
        return _libcombine.StringVector_front(self)


    def back(self):
        """back(StringVector self) -> string"""
        return _libcombine.StringVector_back(self)


    def assign(self, n, x):
        """assign(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type n, string x)"""
        return _libcombine.StringVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type new_size)
        resize(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type new_size, string x)
        """
        return _libcombine.StringVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos, string x) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        insert(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type n, string x)
        """
        return _libcombine.StringVector_insert(self, *args)


    def reserve(self, n):
        """reserve(StringVector self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type n)"""
        return _libcombine.StringVector_reserve(self, n)


    def capacity(self):
        """capacity(StringVector self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _libcombine.StringVector_capacity(self)

    __swig_destroy__ = _libcombine.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _libcombine.StringVector_swigregister
StringVector_swigregister(StringVector)

class VCardVector(_object):
    """Proxy of C++ std::vector<(VCard)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VCardVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VCardVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(VCardVector self) -> SwigPyIterator"""
        return _libcombine.VCardVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(VCardVector self) -> bool"""
        return _libcombine.VCardVector___nonzero__(self)


    def __bool__(self):
        """__bool__(VCardVector self) -> bool"""
        return _libcombine.VCardVector___bool__(self)


    def __len__(self):
        """__len__(VCardVector self) -> std::vector< VCard >::size_type"""
        return _libcombine.VCardVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(VCardVector self, std::vector< VCard >::difference_type i, std::vector< VCard >::difference_type j) -> VCardVector"""
        return _libcombine.VCardVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(VCardVector self, std::vector< VCard >::difference_type i, std::vector< VCard >::difference_type j)
        __setslice__(VCardVector self, std::vector< VCard >::difference_type i, std::vector< VCard >::difference_type j, VCardVector v)
        """
        return _libcombine.VCardVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(VCardVector self, std::vector< VCard >::difference_type i, std::vector< VCard >::difference_type j)"""
        return _libcombine.VCardVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(VCardVector self, std::vector< VCard >::difference_type i)
        __delitem__(VCardVector self, PySliceObject * slice)
        """
        return _libcombine.VCardVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(VCardVector self, PySliceObject * slice) -> VCardVector
        __getitem__(VCardVector self, std::vector< VCard >::difference_type i) -> VCard
        """
        return _libcombine.VCardVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(VCardVector self, PySliceObject * slice, VCardVector v)
        __setitem__(VCardVector self, PySliceObject * slice)
        __setitem__(VCardVector self, std::vector< VCard >::difference_type i, VCard x)
        """
        return _libcombine.VCardVector___setitem__(self, *args)


    def pop(self):
        """pop(VCardVector self) -> VCard"""
        return _libcombine.VCardVector_pop(self)


    def append(self, x):
        """append(VCardVector self, VCard x)"""
        return _libcombine.VCardVector_append(self, x)


    def empty(self):
        """empty(VCardVector self) -> bool"""
        return _libcombine.VCardVector_empty(self)


    def size(self):
        """size(VCardVector self) -> std::vector< VCard >::size_type"""
        return _libcombine.VCardVector_size(self)


    def swap(self, v):
        """swap(VCardVector self, VCardVector v)"""
        return _libcombine.VCardVector_swap(self, v)


    def begin(self):
        """begin(VCardVector self) -> std::vector< VCard >::iterator"""
        return _libcombine.VCardVector_begin(self)


    def end(self):
        """end(VCardVector self) -> std::vector< VCard >::iterator"""
        return _libcombine.VCardVector_end(self)


    def rbegin(self):
        """rbegin(VCardVector self) -> std::vector< VCard >::reverse_iterator"""
        return _libcombine.VCardVector_rbegin(self)


    def rend(self):
        """rend(VCardVector self) -> std::vector< VCard >::reverse_iterator"""
        return _libcombine.VCardVector_rend(self)


    def clear(self):
        """clear(VCardVector self)"""
        return _libcombine.VCardVector_clear(self)


    def get_allocator(self):
        """get_allocator(VCardVector self) -> std::vector< VCard >::allocator_type"""
        return _libcombine.VCardVector_get_allocator(self)


    def pop_back(self):
        """pop_back(VCardVector self)"""
        return _libcombine.VCardVector_pop_back(self)


    def erase(self, *args):
        """
        erase(VCardVector self, std::vector< VCard >::iterator pos) -> std::vector< VCard >::iterator
        erase(VCardVector self, std::vector< VCard >::iterator first, std::vector< VCard >::iterator last) -> std::vector< VCard >::iterator
        """
        return _libcombine.VCardVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(VCard)> self) -> VCardVector
        __init__(std::vector<(VCard)> self, VCardVector arg2) -> VCardVector
        __init__(std::vector<(VCard)> self, std::vector< VCard >::size_type size) -> VCardVector
        __init__(std::vector<(VCard)> self, std::vector< VCard >::size_type size, VCard value) -> VCardVector
        """
        this = _libcombine.new_VCardVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(VCardVector self, VCard x)"""
        return _libcombine.VCardVector_push_back(self, x)


    def front(self):
        """front(VCardVector self) -> VCard"""
        return _libcombine.VCardVector_front(self)


    def back(self):
        """back(VCardVector self) -> VCard"""
        return _libcombine.VCardVector_back(self)


    def assign(self, n, x):
        """assign(VCardVector self, std::vector< VCard >::size_type n, VCard x)"""
        return _libcombine.VCardVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(VCardVector self, std::vector< VCard >::size_type new_size)
        resize(VCardVector self, std::vector< VCard >::size_type new_size, VCard x)
        """
        return _libcombine.VCardVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(VCardVector self, std::vector< VCard >::iterator pos, VCard x) -> std::vector< VCard >::iterator
        insert(VCardVector self, std::vector< VCard >::iterator pos, std::vector< VCard >::size_type n, VCard x)
        """
        return _libcombine.VCardVector_insert(self, *args)


    def reserve(self, n):
        """reserve(VCardVector self, std::vector< VCard >::size_type n)"""
        return _libcombine.VCardVector_reserve(self, n)


    def capacity(self):
        """capacity(VCardVector self) -> std::vector< VCard >::size_type"""
        return _libcombine.VCardVector_capacity(self)

    __swig_destroy__ = _libcombine.delete_VCardVector
    __del__ = lambda self: None
VCardVector_swigregister = _libcombine.VCardVector_swigregister
VCardVector_swigregister(VCardVector)

class MetadataVector(_object):
    """Proxy of C++ std::vector<(OmexDescription)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(MetadataVector self) -> SwigPyIterator"""
        return _libcombine.MetadataVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(MetadataVector self) -> bool"""
        return _libcombine.MetadataVector___nonzero__(self)


    def __bool__(self):
        """__bool__(MetadataVector self) -> bool"""
        return _libcombine.MetadataVector___bool__(self)


    def __len__(self):
        """__len__(MetadataVector self) -> std::vector< OmexDescription >::size_type"""
        return _libcombine.MetadataVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(MetadataVector self, std::vector< OmexDescription >::difference_type i, std::vector< OmexDescription >::difference_type j) -> MetadataVector"""
        return _libcombine.MetadataVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(MetadataVector self, std::vector< OmexDescription >::difference_type i, std::vector< OmexDescription >::difference_type j)
        __setslice__(MetadataVector self, std::vector< OmexDescription >::difference_type i, std::vector< OmexDescription >::difference_type j, MetadataVector v)
        """
        return _libcombine.MetadataVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(MetadataVector self, std::vector< OmexDescription >::difference_type i, std::vector< OmexDescription >::difference_type j)"""
        return _libcombine.MetadataVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(MetadataVector self, std::vector< OmexDescription >::difference_type i)
        __delitem__(MetadataVector self, PySliceObject * slice)
        """
        return _libcombine.MetadataVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(MetadataVector self, PySliceObject * slice) -> MetadataVector
        __getitem__(MetadataVector self, std::vector< OmexDescription >::difference_type i) -> OmexDescription
        """
        return _libcombine.MetadataVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(MetadataVector self, PySliceObject * slice, MetadataVector v)
        __setitem__(MetadataVector self, PySliceObject * slice)
        __setitem__(MetadataVector self, std::vector< OmexDescription >::difference_type i, OmexDescription x)
        """
        return _libcombine.MetadataVector___setitem__(self, *args)


    def pop(self):
        """pop(MetadataVector self) -> OmexDescription"""
        return _libcombine.MetadataVector_pop(self)


    def append(self, x):
        """append(MetadataVector self, OmexDescription x)"""
        return _libcombine.MetadataVector_append(self, x)


    def empty(self):
        """empty(MetadataVector self) -> bool"""
        return _libcombine.MetadataVector_empty(self)


    def size(self):
        """size(MetadataVector self) -> std::vector< OmexDescription >::size_type"""
        return _libcombine.MetadataVector_size(self)


    def swap(self, v):
        """swap(MetadataVector self, MetadataVector v)"""
        return _libcombine.MetadataVector_swap(self, v)


    def begin(self):
        """begin(MetadataVector self) -> std::vector< OmexDescription >::iterator"""
        return _libcombine.MetadataVector_begin(self)


    def end(self):
        """end(MetadataVector self) -> std::vector< OmexDescription >::iterator"""
        return _libcombine.MetadataVector_end(self)


    def rbegin(self):
        """rbegin(MetadataVector self) -> std::vector< OmexDescription >::reverse_iterator"""
        return _libcombine.MetadataVector_rbegin(self)


    def rend(self):
        """rend(MetadataVector self) -> std::vector< OmexDescription >::reverse_iterator"""
        return _libcombine.MetadataVector_rend(self)


    def clear(self):
        """clear(MetadataVector self)"""
        return _libcombine.MetadataVector_clear(self)


    def get_allocator(self):
        """get_allocator(MetadataVector self) -> std::vector< OmexDescription >::allocator_type"""
        return _libcombine.MetadataVector_get_allocator(self)


    def pop_back(self):
        """pop_back(MetadataVector self)"""
        return _libcombine.MetadataVector_pop_back(self)


    def erase(self, *args):
        """
        erase(MetadataVector self, std::vector< OmexDescription >::iterator pos) -> std::vector< OmexDescription >::iterator
        erase(MetadataVector self, std::vector< OmexDescription >::iterator first, std::vector< OmexDescription >::iterator last) -> std::vector< OmexDescription >::iterator
        """
        return _libcombine.MetadataVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(OmexDescription)> self) -> MetadataVector
        __init__(std::vector<(OmexDescription)> self, MetadataVector arg2) -> MetadataVector
        __init__(std::vector<(OmexDescription)> self, std::vector< OmexDescription >::size_type size) -> MetadataVector
        __init__(std::vector<(OmexDescription)> self, std::vector< OmexDescription >::size_type size, OmexDescription value) -> MetadataVector
        """
        this = _libcombine.new_MetadataVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(MetadataVector self, OmexDescription x)"""
        return _libcombine.MetadataVector_push_back(self, x)


    def front(self):
        """front(MetadataVector self) -> OmexDescription"""
        return _libcombine.MetadataVector_front(self)


    def back(self):
        """back(MetadataVector self) -> OmexDescription"""
        return _libcombine.MetadataVector_back(self)


    def assign(self, n, x):
        """assign(MetadataVector self, std::vector< OmexDescription >::size_type n, OmexDescription x)"""
        return _libcombine.MetadataVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(MetadataVector self, std::vector< OmexDescription >::size_type new_size)
        resize(MetadataVector self, std::vector< OmexDescription >::size_type new_size, OmexDescription x)
        """
        return _libcombine.MetadataVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(MetadataVector self, std::vector< OmexDescription >::iterator pos, OmexDescription x) -> std::vector< OmexDescription >::iterator
        insert(MetadataVector self, std::vector< OmexDescription >::iterator pos, std::vector< OmexDescription >::size_type n, OmexDescription x)
        """
        return _libcombine.MetadataVector_insert(self, *args)


    def reserve(self, n):
        """reserve(MetadataVector self, std::vector< OmexDescription >::size_type n)"""
        return _libcombine.MetadataVector_reserve(self, n)


    def capacity(self):
        """capacity(MetadataVector self) -> std::vector< OmexDescription >::size_type"""
        return _libcombine.MetadataVector_capacity(self)

    __swig_destroy__ = _libcombine.delete_MetadataVector
    __del__ = lambda self: None
MetadataVector_swigregister = _libcombine.MetadataVector_swigregister
MetadataVector_swigregister(MetadataVector)

class DateVector(_object):
    """Proxy of C++ std::vector<(Date)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(DateVector self) -> SwigPyIterator"""
        return _libcombine.DateVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(DateVector self) -> bool"""
        return _libcombine.DateVector___nonzero__(self)


    def __bool__(self):
        """__bool__(DateVector self) -> bool"""
        return _libcombine.DateVector___bool__(self)


    def __len__(self):
        """__len__(DateVector self) -> std::vector< Date >::size_type"""
        return _libcombine.DateVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j) -> DateVector"""
        return _libcombine.DateVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j)
        __setslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j, DateVector v)
        """
        return _libcombine.DateVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j)"""
        return _libcombine.DateVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DateVector self, std::vector< Date >::difference_type i)
        __delitem__(DateVector self, PySliceObject * slice)
        """
        return _libcombine.DateVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DateVector self, PySliceObject * slice) -> DateVector
        __getitem__(DateVector self, std::vector< Date >::difference_type i) -> Date
        """
        return _libcombine.DateVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DateVector self, PySliceObject * slice, DateVector v)
        __setitem__(DateVector self, PySliceObject * slice)
        __setitem__(DateVector self, std::vector< Date >::difference_type i, Date x)
        """
        return _libcombine.DateVector___setitem__(self, *args)


    def pop(self):
        """pop(DateVector self) -> Date"""
        return _libcombine.DateVector_pop(self)


    def append(self, x):
        """append(DateVector self, Date x)"""
        return _libcombine.DateVector_append(self, x)


    def empty(self):
        """empty(DateVector self) -> bool"""
        return _libcombine.DateVector_empty(self)


    def size(self):
        """size(DateVector self) -> std::vector< Date >::size_type"""
        return _libcombine.DateVector_size(self)


    def swap(self, v):
        """swap(DateVector self, DateVector v)"""
        return _libcombine.DateVector_swap(self, v)


    def begin(self):
        """begin(DateVector self) -> std::vector< Date >::iterator"""
        return _libcombine.DateVector_begin(self)


    def end(self):
        """end(DateVector self) -> std::vector< Date >::iterator"""
        return _libcombine.DateVector_end(self)


    def rbegin(self):
        """rbegin(DateVector self) -> std::vector< Date >::reverse_iterator"""
        return _libcombine.DateVector_rbegin(self)


    def rend(self):
        """rend(DateVector self) -> std::vector< Date >::reverse_iterator"""
        return _libcombine.DateVector_rend(self)


    def clear(self):
        """clear(DateVector self)"""
        return _libcombine.DateVector_clear(self)


    def get_allocator(self):
        """get_allocator(DateVector self) -> std::vector< Date >::allocator_type"""
        return _libcombine.DateVector_get_allocator(self)


    def pop_back(self):
        """pop_back(DateVector self)"""
        return _libcombine.DateVector_pop_back(self)


    def erase(self, *args):
        """
        erase(DateVector self, std::vector< Date >::iterator pos) -> std::vector< Date >::iterator
        erase(DateVector self, std::vector< Date >::iterator first, std::vector< Date >::iterator last) -> std::vector< Date >::iterator
        """
        return _libcombine.DateVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(Date)> self) -> DateVector
        __init__(std::vector<(Date)> self, DateVector arg2) -> DateVector
        __init__(std::vector<(Date)> self, std::vector< Date >::size_type size) -> DateVector
        __init__(std::vector<(Date)> self, std::vector< Date >::size_type size, Date value) -> DateVector
        """
        this = _libcombine.new_DateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(DateVector self, Date x)"""
        return _libcombine.DateVector_push_back(self, x)


    def front(self):
        """front(DateVector self) -> Date"""
        return _libcombine.DateVector_front(self)


    def back(self):
        """back(DateVector self) -> Date"""
        return _libcombine.DateVector_back(self)


    def assign(self, n, x):
        """assign(DateVector self, std::vector< Date >::size_type n, Date x)"""
        return _libcombine.DateVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DateVector self, std::vector< Date >::size_type new_size)
        resize(DateVector self, std::vector< Date >::size_type new_size, Date x)
        """
        return _libcombine.DateVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(DateVector self, std::vector< Date >::iterator pos, Date x) -> std::vector< Date >::iterator
        insert(DateVector self, std::vector< Date >::iterator pos, std::vector< Date >::size_type n, Date x)
        """
        return _libcombine.DateVector_insert(self, *args)


    def reserve(self, n):
        """reserve(DateVector self, std::vector< Date >::size_type n)"""
        return _libcombine.DateVector_reserve(self, n)


    def capacity(self):
        """capacity(DateVector self) -> std::vector< Date >::size_type"""
        return _libcombine.DateVector_capacity(self)

    __swig_destroy__ = _libcombine.delete_DateVector
    __del__ = lambda self: None
DateVector_swigregister = _libcombine.DateVector_swigregister
DateVector_swigregister(DateVector)

LIBCOMBINE_DOTTED_VERSION = _libcombine.LIBCOMBINE_DOTTED_VERSION
LIBCOMBINE_VERSION = _libcombine.LIBCOMBINE_VERSION
LIBCOMBINE_VERSION_STRING = _libcombine.LIBCOMBINE_VERSION_STRING

def getLibCombineVersion():
    """getLibCombineVersion() -> int"""
    return _libcombine.getLibCombineVersion()

def getLibCombineDottedVersion():
    """getLibCombineDottedVersion() -> char const *"""
    return _libcombine.getLibCombineDottedVersion()

def getLibCombineVersionString():
    """getLibCombineVersionString() -> char const *"""
    return _libcombine.getLibCombineVersionString()
LIBCOMBINE_OPERATION_SUCCESS = _libcombine.LIBCOMBINE_OPERATION_SUCCESS
LIBCOMBINE_INDEX_EXCEEDS_SIZE = _libcombine.LIBCOMBINE_INDEX_EXCEEDS_SIZE
LIBCOMBINE_UNEXPECTED_ATTRIBUTE = _libcombine.LIBCOMBINE_UNEXPECTED_ATTRIBUTE
LIBCOMBINE_OPERATION_FAILED = _libcombine.LIBCOMBINE_OPERATION_FAILED
LIBCOMBINE_INVALID_ATTRIBUTE_VALUE = _libcombine.LIBCOMBINE_INVALID_ATTRIBUTE_VALUE
LIBCOMBINE_INVALID_OBJECT = _libcombine.LIBCOMBINE_INVALID_OBJECT
LIBCOMBINE_DUPLICATE_OBJECT_ID = _libcombine.LIBCOMBINE_DUPLICATE_OBJECT_ID
LIBCOMBINE_LEVEL_MISMATCH = _libcombine.LIBCOMBINE_LEVEL_MISMATCH
LIBCOMBINE_VERSION_MISMATCH = _libcombine.LIBCOMBINE_VERSION_MISMATCH
LIBCOMBINE_INVALID_XML_OPERATION = _libcombine.LIBCOMBINE_INVALID_XML_OPERATION
LIBCOMBINE_NAMESPACES_MISMATCH = _libcombine.LIBCOMBINE_NAMESPACES_MISMATCH
LIBCOMBINE_DUPLICATE_ANNOTATION_NS = _libcombine.LIBCOMBINE_DUPLICATE_ANNOTATION_NS
LIBCOMBINE_ANNOTATION_NAME_NOT_FOUND = _libcombine.LIBCOMBINE_ANNOTATION_NAME_NOT_FOUND
LIBCOMBINE_ANNOTATION_NS_NOT_FOUND = _libcombine.LIBCOMBINE_ANNOTATION_NS_NOT_FOUND
LIBCOMBINE_MISSING_METAID = _libcombine.LIBCOMBINE_MISSING_METAID
LIBCOMBINE_DEPRECATED_ATTRIBUTE = _libcombine.LIBCOMBINE_DEPRECATED_ATTRIBUTE

def CaOperationReturnValue_toString(returnValue):
    """CaOperationReturnValue_toString(int returnValue) -> char const *"""
    return _libcombine.CaOperationReturnValue_toString(returnValue)
LIBSBML_DOTTED_VERSION = _libcombine.LIBSBML_DOTTED_VERSION
LIBSBML_VERSION = _libcombine.LIBSBML_VERSION
LIBSBML_VERSION_STRING = _libcombine.LIBSBML_VERSION_STRING

def getLibSBMLVersion():
    """getLibSBMLVersion() -> int"""
    return _libcombine.getLibSBMLVersion()

def getLibSBMLDottedVersion():
    """getLibSBMLDottedVersion() -> char const *"""
    return _libcombine.getLibSBMLDottedVersion()

def getLibSBMLVersionString():
    """getLibSBMLVersionString() -> char const *"""
    return _libcombine.getLibSBMLVersionString()

def isLibSBMLCompiledWith(option):
    """isLibSBMLCompiledWith(char const * option) -> int"""
    return _libcombine.isLibSBMLCompiledWith(option)

def getLibSBMLDependencyVersionOf(option):
    """getLibSBMLDependencyVersionOf(char const * option) -> char const *"""
    return _libcombine.getLibSBMLDependencyVersionOf(option)
class Date(_object):
    """Proxy of C++ Date class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_Date
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(Date self, unsigned int year=2000, unsigned int month=1, unsigned int day=1, unsigned int hour=0, unsigned int minute=0, unsigned int second=0, unsigned int sign=0, unsigned int hoursOffset=0, unsigned int minutesOffset=0) -> Date
        __init__(Date self, unsigned int year=2000, unsigned int month=1, unsigned int day=1, unsigned int hour=0, unsigned int minute=0, unsigned int second=0, unsigned int sign=0, unsigned int hoursOffset=0) -> Date
        __init__(Date self, unsigned int year=2000, unsigned int month=1, unsigned int day=1, unsigned int hour=0, unsigned int minute=0, unsigned int second=0, unsigned int sign=0) -> Date
        __init__(Date self, unsigned int year=2000, unsigned int month=1, unsigned int day=1, unsigned int hour=0, unsigned int minute=0, unsigned int second=0) -> Date
        __init__(Date self, unsigned int year=2000, unsigned int month=1, unsigned int day=1, unsigned int hour=0, unsigned int minute=0) -> Date
        __init__(Date self, unsigned int year=2000, unsigned int month=1, unsigned int day=1, unsigned int hour=0) -> Date
        __init__(Date self, unsigned int year=2000, unsigned int month=1, unsigned int day=1) -> Date
        __init__(Date self, unsigned int year=2000, unsigned int month=1) -> Date
        __init__(Date self, unsigned int year=2000) -> Date
        __init__(Date self) -> Date
        __init__(Date self, string date) -> Date
        __init__(Date self, Date orig) -> Date
        """
        this = _libcombine.new_Date(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(Date self) -> Date"""
        return _libcombine.Date_clone(self)


    def getYear(self):
        """getYear(Date self) -> unsigned int"""
        return _libcombine.Date_getYear(self)


    def getMonth(self):
        """getMonth(Date self) -> unsigned int"""
        return _libcombine.Date_getMonth(self)


    def getDay(self):
        """getDay(Date self) -> unsigned int"""
        return _libcombine.Date_getDay(self)


    def getHour(self):
        """getHour(Date self) -> unsigned int"""
        return _libcombine.Date_getHour(self)


    def getMinute(self):
        """getMinute(Date self) -> unsigned int"""
        return _libcombine.Date_getMinute(self)


    def getSecond(self):
        """getSecond(Date self) -> unsigned int"""
        return _libcombine.Date_getSecond(self)


    def getSignOffset(self):
        """getSignOffset(Date self) -> unsigned int"""
        return _libcombine.Date_getSignOffset(self)


    def getHoursOffset(self):
        """getHoursOffset(Date self) -> unsigned int"""
        return _libcombine.Date_getHoursOffset(self)


    def getMinutesOffset(self):
        """getMinutesOffset(Date self) -> unsigned int"""
        return _libcombine.Date_getMinutesOffset(self)


    def getDateAsString(self):
        """getDateAsString(Date self) -> string"""
        return _libcombine.Date_getDateAsString(self)


    def setYear(self, year):
        """setYear(Date self, unsigned int year) -> int"""
        return _libcombine.Date_setYear(self, year)


    def setMonth(self, month):
        """setMonth(Date self, unsigned int month) -> int"""
        return _libcombine.Date_setMonth(self, month)


    def setDay(self, day):
        """setDay(Date self, unsigned int day) -> int"""
        return _libcombine.Date_setDay(self, day)


    def setHour(self, hour):
        """setHour(Date self, unsigned int hour) -> int"""
        return _libcombine.Date_setHour(self, hour)


    def setMinute(self, minute):
        """setMinute(Date self, unsigned int minute) -> int"""
        return _libcombine.Date_setMinute(self, minute)


    def setSecond(self, second):
        """setSecond(Date self, unsigned int second) -> int"""
        return _libcombine.Date_setSecond(self, second)


    def setSignOffset(self, sign):
        """setSignOffset(Date self, unsigned int sign) -> int"""
        return _libcombine.Date_setSignOffset(self, sign)


    def setHoursOffset(self, hoursOffset):
        """setHoursOffset(Date self, unsigned int hoursOffset) -> int"""
        return _libcombine.Date_setHoursOffset(self, hoursOffset)


    def setMinutesOffset(self, minutesOffset):
        """setMinutesOffset(Date self, unsigned int minutesOffset) -> int"""
        return _libcombine.Date_setMinutesOffset(self, minutesOffset)


    def setDateAsString(self, date):
        """setDateAsString(Date self, string date) -> int"""
        return _libcombine.Date_setDateAsString(self, date)


    def representsValidDate(self):
        """representsValidDate(Date self) -> bool"""
        return _libcombine.Date_representsValidDate(self)


    def hasBeenModified(self):
        """hasBeenModified(Date self) -> bool"""
        return _libcombine.Date_hasBeenModified(self)


    def resetModifiedFlags(self):
        """resetModifiedFlags(Date self)"""
        return _libcombine.Date_resetModifiedFlags(self)

Date_swigregister = _libcombine.Date_swigregister
Date_swigregister(Date)

LIBSBML_OPERATION_SUCCESS = _libcombine.LIBSBML_OPERATION_SUCCESS
LIBSBML_INDEX_EXCEEDS_SIZE = _libcombine.LIBSBML_INDEX_EXCEEDS_SIZE
LIBSBML_UNEXPECTED_ATTRIBUTE = _libcombine.LIBSBML_UNEXPECTED_ATTRIBUTE
LIBSBML_OPERATION_FAILED = _libcombine.LIBSBML_OPERATION_FAILED
LIBSBML_INVALID_ATTRIBUTE_VALUE = _libcombine.LIBSBML_INVALID_ATTRIBUTE_VALUE
LIBSBML_INVALID_OBJECT = _libcombine.LIBSBML_INVALID_OBJECT
LIBSBML_DUPLICATE_OBJECT_ID = _libcombine.LIBSBML_DUPLICATE_OBJECT_ID
LIBSBML_LEVEL_MISMATCH = _libcombine.LIBSBML_LEVEL_MISMATCH
LIBSBML_VERSION_MISMATCH = _libcombine.LIBSBML_VERSION_MISMATCH
LIBSBML_INVALID_XML_OPERATION = _libcombine.LIBSBML_INVALID_XML_OPERATION
LIBSBML_NAMESPACES_MISMATCH = _libcombine.LIBSBML_NAMESPACES_MISMATCH
LIBSBML_DUPLICATE_ANNOTATION_NS = _libcombine.LIBSBML_DUPLICATE_ANNOTATION_NS
LIBSBML_ANNOTATION_NAME_NOT_FOUND = _libcombine.LIBSBML_ANNOTATION_NAME_NOT_FOUND
LIBSBML_ANNOTATION_NS_NOT_FOUND = _libcombine.LIBSBML_ANNOTATION_NS_NOT_FOUND
LIBSBML_MISSING_METAID = _libcombine.LIBSBML_MISSING_METAID
LIBSBML_DEPRECATED_ATTRIBUTE = _libcombine.LIBSBML_DEPRECATED_ATTRIBUTE
LIBSBML_USE_ID_ATTRIBUTE_FUNCTION = _libcombine.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION
LIBSBML_PKG_VERSION_MISMATCH = _libcombine.LIBSBML_PKG_VERSION_MISMATCH
LIBSBML_PKG_UNKNOWN = _libcombine.LIBSBML_PKG_UNKNOWN
LIBSBML_PKG_UNKNOWN_VERSION = _libcombine.LIBSBML_PKG_UNKNOWN_VERSION
LIBSBML_PKG_DISABLED = _libcombine.LIBSBML_PKG_DISABLED
LIBSBML_PKG_CONFLICTED_VERSION = _libcombine.LIBSBML_PKG_CONFLICTED_VERSION
LIBSBML_PKG_CONFLICT = _libcombine.LIBSBML_PKG_CONFLICT
LIBSBML_CONV_INVALID_TARGET_NAMESPACE = _libcombine.LIBSBML_CONV_INVALID_TARGET_NAMESPACE
LIBSBML_CONV_PKG_CONVERSION_NOT_AVAILABLE = _libcombine.LIBSBML_CONV_PKG_CONVERSION_NOT_AVAILABLE
LIBSBML_CONV_INVALID_SRC_DOCUMENT = _libcombine.LIBSBML_CONV_INVALID_SRC_DOCUMENT
LIBSBML_CONV_CONVERSION_NOT_AVAILABLE = _libcombine.LIBSBML_CONV_CONVERSION_NOT_AVAILABLE
LIBSBML_CONV_PKG_CONSIDERED_UNKNOWN = _libcombine.LIBSBML_CONV_PKG_CONSIDERED_UNKNOWN

def OperationReturnValue_toString(returnValue):
    """OperationReturnValue_toString(int returnValue) -> char const *"""
    return _libcombine.OperationReturnValue_toString(returnValue)
class SyntaxChecker(_object):
    """Proxy of C++ SyntaxChecker class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SyntaxChecker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SyntaxChecker, name)
    __repr__ = _swig_repr

    def isValidSBMLSId(sid):
        """isValidSBMLSId(string sid) -> bool"""
        return _libcombine.SyntaxChecker_isValidSBMLSId(sid)

    isValidSBMLSId = staticmethod(isValidSBMLSId)

    def isValidXMLID(id):
        """isValidXMLID(string id) -> bool"""
        return _libcombine.SyntaxChecker_isValidXMLID(id)

    isValidXMLID = staticmethod(isValidXMLID)

    def isValidXMLanyURI(uri):
        """isValidXMLanyURI(string uri) -> bool"""
        return _libcombine.SyntaxChecker_isValidXMLanyURI(uri)

    isValidXMLanyURI = staticmethod(isValidXMLanyURI)

    def isValidUnitSId(units):
        """isValidUnitSId(string units) -> bool"""
        return _libcombine.SyntaxChecker_isValidUnitSId(units)

    isValidUnitSId = staticmethod(isValidUnitSId)

    def hasExpectedXHTMLSyntax(xhtml, sbmlns=None):
        """
        hasExpectedXHTMLSyntax(XMLNode xhtml, SBMLNamespaces * sbmlns=None) -> bool
        hasExpectedXHTMLSyntax(XMLNode xhtml) -> bool
        """
        return _libcombine.SyntaxChecker_hasExpectedXHTMLSyntax(xhtml, sbmlns)

    hasExpectedXHTMLSyntax = staticmethod(hasExpectedXHTMLSyntax)

    def isValidInternalSId(sid):
        """isValidInternalSId(string sid) -> bool"""
        return _libcombine.SyntaxChecker_isValidInternalSId(sid)

    isValidInternalSId = staticmethod(isValidInternalSId)

    def isValidInternalUnitSId(sid):
        """isValidInternalUnitSId(string sid) -> bool"""
        return _libcombine.SyntaxChecker_isValidInternalUnitSId(sid)

    isValidInternalUnitSId = staticmethod(isValidInternalUnitSId)

    def __init__(self):
        """__init__(SyntaxChecker self) -> SyntaxChecker"""
        this = _libcombine.new_SyntaxChecker()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_SyntaxChecker
    __del__ = lambda self: None
SyntaxChecker_swigregister = _libcombine.SyntaxChecker_swigregister
SyntaxChecker_swigregister(SyntaxChecker)

def SyntaxChecker_isValidSBMLSId(sid):
    """SyntaxChecker_isValidSBMLSId(string sid) -> bool"""
    return _libcombine.SyntaxChecker_isValidSBMLSId(sid)

def SyntaxChecker_isValidXMLID(id):
    """SyntaxChecker_isValidXMLID(string id) -> bool"""
    return _libcombine.SyntaxChecker_isValidXMLID(id)

def SyntaxChecker_isValidXMLanyURI(uri):
    """SyntaxChecker_isValidXMLanyURI(string uri) -> bool"""
    return _libcombine.SyntaxChecker_isValidXMLanyURI(uri)

def SyntaxChecker_isValidUnitSId(units):
    """SyntaxChecker_isValidUnitSId(string units) -> bool"""
    return _libcombine.SyntaxChecker_isValidUnitSId(units)

def SyntaxChecker_hasExpectedXHTMLSyntax(xhtml, sbmlns=None):
    """
    hasExpectedXHTMLSyntax(XMLNode xhtml, SBMLNamespaces * sbmlns=None) -> bool
    SyntaxChecker_hasExpectedXHTMLSyntax(XMLNode xhtml) -> bool
    """
    return _libcombine.SyntaxChecker_hasExpectedXHTMLSyntax(xhtml, sbmlns)

def SyntaxChecker_isValidInternalSId(sid):
    """SyntaxChecker_isValidInternalSId(string sid) -> bool"""
    return _libcombine.SyntaxChecker_isValidInternalSId(sid)

def SyntaxChecker_isValidInternalUnitSId(sid):
    """SyntaxChecker_isValidInternalUnitSId(string sid) -> bool"""
    return _libcombine.SyntaxChecker_isValidInternalUnitSId(sid)

class XMLAttributes(_object):
    """Proxy of C++ XMLAttributes class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLAttributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLAttributes, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_XMLAttributes
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(XMLAttributes self) -> XMLAttributes
        __init__(XMLAttributes self, XMLAttributes orig) -> XMLAttributes
        """
        this = _libcombine.new_XMLAttributes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(XMLAttributes self) -> XMLAttributes"""
        return _libcombine.XMLAttributes_clone(self)


    def add(self, *args):
        """
        add(XMLAttributes self, string name, string value, string namespaceURI, string prefix) -> int
        add(XMLAttributes self, string name, string value, string namespaceURI) -> int
        add(XMLAttributes self, string name, string value) -> int
        add(XMLAttributes self, XMLTriple triple, string value) -> int
        """
        return _libcombine.XMLAttributes_add(self, *args)


    def addResource(self, name, value):
        """addResource(XMLAttributes self, string name, string value) -> int"""
        return _libcombine.XMLAttributes_addResource(self, name, value)


    def removeResource(self, n):
        """removeResource(XMLAttributes self, int n) -> int"""
        return _libcombine.XMLAttributes_removeResource(self, n)


    def remove(self, *args):
        """
        remove(XMLAttributes self, int n) -> int
        remove(XMLAttributes self, string name, string uri) -> int
        remove(XMLAttributes self, string name) -> int
        remove(XMLAttributes self, XMLTriple triple) -> int
        """
        return _libcombine.XMLAttributes_remove(self, *args)


    def clear(self):
        """clear(XMLAttributes self) -> int"""
        return _libcombine.XMLAttributes_clear(self)


    def getIndex(self, *args):
        """
        getIndex(XMLAttributes self, string name) -> int
        getIndex(XMLAttributes self, string name, string uri) -> int
        getIndex(XMLAttributes self, XMLTriple triple) -> int
        """
        return _libcombine.XMLAttributes_getIndex(self, *args)


    def getLength(self):
        """getLength(XMLAttributes self) -> int"""
        return _libcombine.XMLAttributes_getLength(self)


    def getNumAttributes(self):
        """getNumAttributes(XMLAttributes self) -> int"""
        return _libcombine.XMLAttributes_getNumAttributes(self)


    def getName(self, index):
        """getName(XMLAttributes self, int index) -> string"""
        return _libcombine.XMLAttributes_getName(self, index)


    def getPrefix(self, index):
        """getPrefix(XMLAttributes self, int index) -> string"""
        return _libcombine.XMLAttributes_getPrefix(self, index)


    def getPrefixedName(self, index):
        """getPrefixedName(XMLAttributes self, int index) -> string"""
        return _libcombine.XMLAttributes_getPrefixedName(self, index)


    def getURI(self, index):
        """getURI(XMLAttributes self, int index) -> string"""
        return _libcombine.XMLAttributes_getURI(self, index)


    def getValue(self, *args):
        """
        getValue(XMLAttributes self, int index) -> string
        getValue(XMLAttributes self, string name) -> string
        getValue(XMLAttributes self, string name, string uri) -> string
        getValue(XMLAttributes self, XMLTriple triple) -> string
        """
        return _libcombine.XMLAttributes_getValue(self, *args)


    def hasAttribute(self, *args):
        """
        hasAttribute(XMLAttributes self, int index) -> bool
        hasAttribute(XMLAttributes self, string name, string uri) -> bool
        hasAttribute(XMLAttributes self, string name) -> bool
        hasAttribute(XMLAttributes self, XMLTriple triple) -> bool
        """
        return _libcombine.XMLAttributes_hasAttribute(self, *args)


    def isEmpty(self):
        """isEmpty(XMLAttributes self) -> bool"""
        return _libcombine.XMLAttributes_isEmpty(self)


    def write(self, stream):
        """write(XMLAttributes self, XMLOutputStream stream)"""
        return _libcombine.XMLAttributes_write(self, stream)


    def setErrorLog(self, log):
        """setErrorLog(XMLAttributes self, XMLErrorLog log) -> int"""
        return _libcombine.XMLAttributes_setErrorLog(self, log)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLAttributes_swigregister = _libcombine.XMLAttributes_swigregister
XMLAttributes_swigregister(XMLAttributes)

class XMLNamespaces(_object):
    """Proxy of C++ XMLNamespaces class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLNamespaces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLNamespaces, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_XMLNamespaces
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(XMLNamespaces self) -> XMLNamespaces
        __init__(XMLNamespaces self, XMLNamespaces orig) -> XMLNamespaces
        """
        this = _libcombine.new_XMLNamespaces(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(XMLNamespaces self) -> XMLNamespaces"""
        return _libcombine.XMLNamespaces_clone(self)


    def add(self, *args):
        """
        add(XMLNamespaces self, string uri, string prefix) -> int
        add(XMLNamespaces self, string uri) -> int
        """
        return _libcombine.XMLNamespaces_add(self, *args)


    def remove(self, *args):
        """
        remove(XMLNamespaces self, int index) -> int
        remove(XMLNamespaces self, string prefix) -> int
        """
        return _libcombine.XMLNamespaces_remove(self, *args)


    def clear(self):
        """clear(XMLNamespaces self) -> int"""
        return _libcombine.XMLNamespaces_clear(self)


    def getIndex(self, uri):
        """getIndex(XMLNamespaces self, string uri) -> int"""
        return _libcombine.XMLNamespaces_getIndex(self, uri)


    def containsUri(self, uri):
        """containsUri(XMLNamespaces self, string uri) -> bool"""
        return _libcombine.XMLNamespaces_containsUri(self, uri)


    def getIndexByPrefix(self, prefix):
        """getIndexByPrefix(XMLNamespaces self, string prefix) -> int"""
        return _libcombine.XMLNamespaces_getIndexByPrefix(self, prefix)


    def getLength(self):
        """getLength(XMLNamespaces self) -> int"""
        return _libcombine.XMLNamespaces_getLength(self)


    def getNumNamespaces(self):
        """getNumNamespaces(XMLNamespaces self) -> int"""
        return _libcombine.XMLNamespaces_getNumNamespaces(self)


    def getPrefix(self, *args):
        """
        getPrefix(XMLNamespaces self, int index) -> string
        getPrefix(XMLNamespaces self, string uri) -> string
        """
        return _libcombine.XMLNamespaces_getPrefix(self, *args)


    def getURI(self, *args):
        """
        getURI(XMLNamespaces self, int index) -> string
        getURI(XMLNamespaces self, string prefix) -> string
        getURI(XMLNamespaces self) -> string
        """
        return _libcombine.XMLNamespaces_getURI(self, *args)


    def isEmpty(self):
        """isEmpty(XMLNamespaces self) -> bool"""
        return _libcombine.XMLNamespaces_isEmpty(self)


    def hasURI(self, uri):
        """hasURI(XMLNamespaces self, string uri) -> bool"""
        return _libcombine.XMLNamespaces_hasURI(self, uri)


    def hasPrefix(self, prefix):
        """hasPrefix(XMLNamespaces self, string prefix) -> bool"""
        return _libcombine.XMLNamespaces_hasPrefix(self, prefix)


    def hasNS(self, uri, prefix):
        """hasNS(XMLNamespaces self, string uri, string prefix) -> bool"""
        return _libcombine.XMLNamespaces_hasNS(self, uri, prefix)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLNamespaces_swigregister = _libcombine.XMLNamespaces_swigregister
XMLNamespaces_swigregister(XMLNamespaces)

class XMLToken(_object):
    """Proxy of C++ XMLToken class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLToken, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLToken, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_XMLToken
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(XMLToken self) -> XMLToken
        __init__(XMLToken self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces, unsigned int const line=0, unsigned int const column=0) -> XMLToken
        __init__(XMLToken self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces, unsigned int const line=0) -> XMLToken
        __init__(XMLToken self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces) -> XMLToken
        __init__(XMLToken self, XMLTriple triple, XMLAttributes attributes, unsigned int const line=0, unsigned int const column=0) -> XMLToken
        __init__(XMLToken self, XMLTriple triple, XMLAttributes attributes, unsigned int const line=0) -> XMLToken
        __init__(XMLToken self, XMLTriple triple, XMLAttributes attributes) -> XMLToken
        __init__(XMLToken self, XMLTriple triple, unsigned int const line=0, unsigned int const column=0) -> XMLToken
        __init__(XMLToken self, XMLTriple triple, unsigned int const line=0) -> XMLToken
        __init__(XMLToken self, XMLTriple triple) -> XMLToken
        __init__(XMLToken self, string chars, unsigned int const line=0, unsigned int const column=0) -> XMLToken
        __init__(XMLToken self, string chars, unsigned int const line=0) -> XMLToken
        __init__(XMLToken self, string chars) -> XMLToken
        __init__(XMLToken self, XMLToken orig) -> XMLToken
        """
        this = _libcombine.new_XMLToken(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(XMLToken self) -> XMLToken"""
        return _libcombine.XMLToken_clone(self)


    def getAttributes(self):
        """getAttributes(XMLToken self) -> XMLAttributes"""
        return _libcombine.XMLToken_getAttributes(self)


    def setAttributes(self, attributes):
        """setAttributes(XMLToken self, XMLAttributes attributes) -> int"""
        return _libcombine.XMLToken_setAttributes(self, attributes)


    def addAttr(self, *args):
        """
        addAttr(XMLToken self, string name, string value, string namespaceURI, string prefix) -> int
        addAttr(XMLToken self, string name, string value, string namespaceURI) -> int
        addAttr(XMLToken self, string name, string value) -> int
        addAttr(XMLToken self, XMLTriple triple, string value) -> int
        """
        return _libcombine.XMLToken_addAttr(self, *args)


    def removeAttr(self, *args):
        """
        removeAttr(XMLToken self, int n) -> int
        removeAttr(XMLToken self, string name, string uri) -> int
        removeAttr(XMLToken self, string name) -> int
        removeAttr(XMLToken self, XMLTriple triple) -> int
        """
        return _libcombine.XMLToken_removeAttr(self, *args)


    def clearAttributes(self):
        """clearAttributes(XMLToken self) -> int"""
        return _libcombine.XMLToken_clearAttributes(self)


    def getAttrIndex(self, *args):
        """
        getAttrIndex(XMLToken self, string name, string uri) -> int
        getAttrIndex(XMLToken self, string name) -> int
        getAttrIndex(XMLToken self, XMLTriple triple) -> int
        """
        return _libcombine.XMLToken_getAttrIndex(self, *args)


    def getAttributesLength(self):
        """getAttributesLength(XMLToken self) -> int"""
        return _libcombine.XMLToken_getAttributesLength(self)


    def getAttrName(self, index):
        """getAttrName(XMLToken self, int index) -> string"""
        return _libcombine.XMLToken_getAttrName(self, index)


    def getAttrPrefix(self, index):
        """getAttrPrefix(XMLToken self, int index) -> string"""
        return _libcombine.XMLToken_getAttrPrefix(self, index)


    def getAttrPrefixedName(self, index):
        """getAttrPrefixedName(XMLToken self, int index) -> string"""
        return _libcombine.XMLToken_getAttrPrefixedName(self, index)


    def getAttrURI(self, index):
        """getAttrURI(XMLToken self, int index) -> string"""
        return _libcombine.XMLToken_getAttrURI(self, index)


    def getAttrValue(self, *args):
        """
        getAttrValue(XMLToken self, int index) -> string
        getAttrValue(XMLToken self, string name, string uri) -> string
        getAttrValue(XMLToken self, string name) -> string
        getAttrValue(XMLToken self, XMLTriple triple) -> string
        """
        return _libcombine.XMLToken_getAttrValue(self, *args)


    def hasAttr(self, *args):
        """
        hasAttr(XMLToken self, int index) -> bool
        hasAttr(XMLToken self, string name, string uri) -> bool
        hasAttr(XMLToken self, string name) -> bool
        hasAttr(XMLToken self, XMLTriple triple) -> bool
        """
        return _libcombine.XMLToken_hasAttr(self, *args)


    def isAttributesEmpty(self):
        """isAttributesEmpty(XMLToken self) -> bool"""
        return _libcombine.XMLToken_isAttributesEmpty(self)


    def getNamespaces(self):
        """getNamespaces(XMLToken self) -> XMLNamespaces"""
        return _libcombine.XMLToken_getNamespaces(self)


    def setNamespaces(self, namespaces):
        """setNamespaces(XMLToken self, XMLNamespaces namespaces) -> int"""
        return _libcombine.XMLToken_setNamespaces(self, namespaces)


    def addNamespace(self, *args):
        """
        addNamespace(XMLToken self, string uri, string prefix) -> int
        addNamespace(XMLToken self, string uri) -> int
        """
        return _libcombine.XMLToken_addNamespace(self, *args)


    def removeNamespace(self, *args):
        """
        removeNamespace(XMLToken self, int index) -> int
        removeNamespace(XMLToken self, string prefix) -> int
        """
        return _libcombine.XMLToken_removeNamespace(self, *args)


    def clearNamespaces(self):
        """clearNamespaces(XMLToken self) -> int"""
        return _libcombine.XMLToken_clearNamespaces(self)


    def getNamespaceIndex(self, uri):
        """getNamespaceIndex(XMLToken self, string uri) -> int"""
        return _libcombine.XMLToken_getNamespaceIndex(self, uri)


    def getNamespaceIndexByPrefix(self, prefix):
        """getNamespaceIndexByPrefix(XMLToken self, string prefix) -> int"""
        return _libcombine.XMLToken_getNamespaceIndexByPrefix(self, prefix)


    def getNamespacesLength(self):
        """getNamespacesLength(XMLToken self) -> int"""
        return _libcombine.XMLToken_getNamespacesLength(self)


    def getNamespacePrefix(self, *args):
        """
        getNamespacePrefix(XMLToken self, int index) -> string
        getNamespacePrefix(XMLToken self, string uri) -> string
        """
        return _libcombine.XMLToken_getNamespacePrefix(self, *args)


    def getNamespaceURI(self, *args):
        """
        getNamespaceURI(XMLToken self, int index) -> string
        getNamespaceURI(XMLToken self, string prefix) -> string
        getNamespaceURI(XMLToken self) -> string
        """
        return _libcombine.XMLToken_getNamespaceURI(self, *args)


    def isNamespacesEmpty(self):
        """isNamespacesEmpty(XMLToken self) -> bool"""
        return _libcombine.XMLToken_isNamespacesEmpty(self)


    def hasNamespaceURI(self, uri):
        """hasNamespaceURI(XMLToken self, string uri) -> bool"""
        return _libcombine.XMLToken_hasNamespaceURI(self, uri)


    def hasNamespacePrefix(self, prefix):
        """hasNamespacePrefix(XMLToken self, string prefix) -> bool"""
        return _libcombine.XMLToken_hasNamespacePrefix(self, prefix)


    def hasNamespaceNS(self, uri, prefix):
        """hasNamespaceNS(XMLToken self, string uri, string prefix) -> bool"""
        return _libcombine.XMLToken_hasNamespaceNS(self, uri, prefix)


    def setTriple(self, triple):
        """setTriple(XMLToken self, XMLTriple triple) -> int"""
        return _libcombine.XMLToken_setTriple(self, triple)


    def getName(self):
        """getName(XMLToken self) -> string"""
        return _libcombine.XMLToken_getName(self)


    def getPrefix(self):
        """getPrefix(XMLToken self) -> string"""
        return _libcombine.XMLToken_getPrefix(self)


    def getURI(self):
        """getURI(XMLToken self) -> string"""
        return _libcombine.XMLToken_getURI(self)


    def getCharacters(self):
        """getCharacters(XMLToken self) -> string"""
        return _libcombine.XMLToken_getCharacters(self)


    def setCharacters(self, chars):
        """setCharacters(XMLToken self, string chars) -> int"""
        return _libcombine.XMLToken_setCharacters(self, chars)


    def append(self, chars):
        """append(XMLToken self, string chars) -> int"""
        return _libcombine.XMLToken_append(self, chars)


    def getColumn(self):
        """getColumn(XMLToken self) -> unsigned int"""
        return _libcombine.XMLToken_getColumn(self)


    def getLine(self):
        """getLine(XMLToken self) -> unsigned int"""
        return _libcombine.XMLToken_getLine(self)


    def isElement(self):
        """isElement(XMLToken self) -> bool"""
        return _libcombine.XMLToken_isElement(self)


    def isEnd(self):
        """isEnd(XMLToken self) -> bool"""
        return _libcombine.XMLToken_isEnd(self)


    def isEndFor(self, element):
        """isEndFor(XMLToken self, XMLToken element) -> bool"""
        return _libcombine.XMLToken_isEndFor(self, element)


    def isEOF(self):
        """isEOF(XMLToken self) -> bool"""
        return _libcombine.XMLToken_isEOF(self)


    def isStart(self):
        """isStart(XMLToken self) -> bool"""
        return _libcombine.XMLToken_isStart(self)


    def isText(self):
        """isText(XMLToken self) -> bool"""
        return _libcombine.XMLToken_isText(self)


    def setEnd(self):
        """setEnd(XMLToken self) -> int"""
        return _libcombine.XMLToken_setEnd(self)


    def setEOF(self):
        """setEOF(XMLToken self) -> int"""
        return _libcombine.XMLToken_setEOF(self)


    def unsetEnd(self):
        """unsetEnd(XMLToken self) -> int"""
        return _libcombine.XMLToken_unsetEnd(self)


    def toString(self):
        """toString(XMLToken self) -> string"""
        return _libcombine.XMLToken_toString(self)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLToken_swigregister = _libcombine.XMLToken_swigregister
XMLToken_swigregister(XMLToken)

class XMLNode(XMLToken):
    """Proxy of C++ XMLNode class."""

    __swig_setmethods__ = {}
    for _s in [XMLToken]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLNode, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLToken]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLNode, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_XMLNode
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(XMLNode self) -> XMLNode
        __init__(XMLNode self, XMLToken token) -> XMLNode
        __init__(XMLNode self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces, unsigned int const line=0, unsigned int const column=0) -> XMLNode
        __init__(XMLNode self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces, unsigned int const line=0) -> XMLNode
        __init__(XMLNode self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces) -> XMLNode
        __init__(XMLNode self, XMLTriple triple, XMLAttributes attributes, unsigned int const line=0, unsigned int const column=0) -> XMLNode
        __init__(XMLNode self, XMLTriple triple, XMLAttributes attributes, unsigned int const line=0) -> XMLNode
        __init__(XMLNode self, XMLTriple triple, XMLAttributes attributes) -> XMLNode
        __init__(XMLNode self, XMLTriple triple, unsigned int const line=0, unsigned int const column=0) -> XMLNode
        __init__(XMLNode self, XMLTriple triple, unsigned int const line=0) -> XMLNode
        __init__(XMLNode self, XMLTriple triple) -> XMLNode
        __init__(XMLNode self, string chars, unsigned int const line=0, unsigned int const column=0) -> XMLNode
        __init__(XMLNode self, string chars, unsigned int const line=0) -> XMLNode
        __init__(XMLNode self, string chars) -> XMLNode
        __init__(XMLNode self, XMLInputStream stream) -> XMLNode
        __init__(XMLNode self, XMLNode orig) -> XMLNode
        """
        this = _libcombine.new_XMLNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(XMLNode self) -> XMLNode"""
        return _libcombine.XMLNode_clone(self)


    def addChild(self, node):
        """addChild(XMLNode self, XMLNode node) -> int"""
        return _libcombine.XMLNode_addChild(self, node)


    def insertChild(self, n, node):
        """insertChild(XMLNode self, unsigned int n, XMLNode node) -> XMLNode"""
        return _libcombine.XMLNode_insertChild(self, n, node)


    def removeChild(self, n):
        """removeChild(XMLNode self, unsigned int n) -> XMLNode"""
        return _libcombine.XMLNode_removeChild(self, n)


    def removeChildren(self):
        """removeChildren(XMLNode self) -> int"""
        return _libcombine.XMLNode_removeChildren(self)


    def getChild(self, *args):
        """
        getChild(XMLNode self, unsigned int n) -> XMLNode
        getChild(XMLNode self, unsigned int n) -> XMLNode
        getChild(XMLNode self, string name) -> XMLNode
        getChild(XMLNode self, string name) -> XMLNode
        """
        return _libcombine.XMLNode_getChild(self, *args)


    def getIndex(self, name):
        """getIndex(XMLNode self, string name) -> int"""
        return _libcombine.XMLNode_getIndex(self, name)


    def hasChild(self, name):
        """hasChild(XMLNode self, string name) -> bool"""
        return _libcombine.XMLNode_hasChild(self, name)


    def equals(self, other, ignoreURI=False, ignoreAttributeValues=False):
        """
        equals(XMLNode self, XMLNode other, bool ignoreURI=False, bool ignoreAttributeValues=False) -> bool
        equals(XMLNode self, XMLNode other, bool ignoreURI=False) -> bool
        equals(XMLNode self, XMLNode other) -> bool
        """
        return _libcombine.XMLNode_equals(self, other, ignoreURI, ignoreAttributeValues)


    def getNumChildren(self):
        """getNumChildren(XMLNode self) -> unsigned int"""
        return _libcombine.XMLNode_getNumChildren(self)


    def writeToStream(self, stream):
        """writeToStream(XMLNode self, XMLOutputStream stream)"""
        return _libcombine.XMLNode_writeToStream(self, stream)


    def toXMLString(self):
        """toXMLString(XMLNode self) -> string"""
        return _libcombine.XMLNode_toXMLString(self)


    def convertXMLNodeToString(node):
        """convertXMLNodeToString(XMLNode node) -> string"""
        return _libcombine.XMLNode_convertXMLNodeToString(node)

    convertXMLNodeToString = staticmethod(convertXMLNodeToString)

    def convertStringToXMLNode(xmlstr, xmlns=None):
        """
        convertStringToXMLNode(string xmlstr, XMLNamespaces xmlns=None) -> XMLNode
        convertStringToXMLNode(string xmlstr) -> XMLNode
        """
        return _libcombine.XMLNode_convertStringToXMLNode(xmlstr, xmlns)

    convertStringToXMLNode = staticmethod(convertStringToXMLNode)
XMLNode_swigregister = _libcombine.XMLNode_swigregister
XMLNode_swigregister(XMLNode)

def XMLNode_convertXMLNodeToString(node):
    """XMLNode_convertXMLNodeToString(XMLNode node) -> string"""
    return _libcombine.XMLNode_convertXMLNodeToString(node)

def XMLNode_convertStringToXMLNode(xmlstr, xmlns=None):
    """
    convertStringToXMLNode(string xmlstr, XMLNamespaces xmlns=None) -> XMLNode
    XMLNode_convertStringToXMLNode(string xmlstr) -> XMLNode
    """
    return _libcombine.XMLNode_convertStringToXMLNode(xmlstr, xmlns)

class XMLTriple(_object):
    """Proxy of C++ XMLTriple class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLTriple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLTriple, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XMLTriple self) -> XMLTriple
        __init__(XMLTriple self, string name, string uri, string prefix) -> XMLTriple
        __init__(XMLTriple self, string triplet, char const sepchar) -> XMLTriple
        __init__(XMLTriple self, string triplet) -> XMLTriple
        __init__(XMLTriple self, XMLTriple orig) -> XMLTriple
        """
        this = _libcombine.new_XMLTriple(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_XMLTriple
    __del__ = lambda self: None

    def clone(self):
        """clone(XMLTriple self) -> XMLTriple"""
        return _libcombine.XMLTriple_clone(self)


    def getName(self):
        """getName(XMLTriple self) -> string"""
        return _libcombine.XMLTriple_getName(self)


    def getPrefix(self):
        """getPrefix(XMLTriple self) -> string"""
        return _libcombine.XMLTriple_getPrefix(self)


    def getURI(self):
        """getURI(XMLTriple self) -> string"""
        return _libcombine.XMLTriple_getURI(self)


    def getPrefixedName(self):
        """getPrefixedName(XMLTriple self) -> string"""
        return _libcombine.XMLTriple_getPrefixedName(self)


    def isEmpty(self):
        """isEmpty(XMLTriple self) -> bool"""
        return _libcombine.XMLTriple_isEmpty(self)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLTriple_swigregister = _libcombine.XMLTriple_swigregister
XMLTriple_swigregister(XMLTriple)

class XMLOutputStream(_object):
    """Proxy of C++ XMLOutputStream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLOutputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLOutputStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XMLOutputStream self, ostream stream, string encoding, bool writeXMLDecl=True, string programName, string programVersion) -> XMLOutputStream
        __init__(XMLOutputStream self, ostream stream, string encoding, bool writeXMLDecl=True, string programName) -> XMLOutputStream
        __init__(XMLOutputStream self, ostream stream, string encoding, bool writeXMLDecl=True) -> XMLOutputStream
        __init__(XMLOutputStream self, ostream stream, string encoding) -> XMLOutputStream
        __init__(XMLOutputStream self, ostream stream) -> XMLOutputStream
        """
        this = _libcombine.new_XMLOutputStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_XMLOutputStream
    __del__ = lambda self: None

    def endElement(self, *args):
        """
        endElement(XMLOutputStream self, string name, string prefix)
        endElement(XMLOutputStream self, string name)
        endElement(XMLOutputStream self, XMLTriple triple, bool text=False)
        endElement(XMLOutputStream self, XMLTriple triple)
        """
        return _libcombine.XMLOutputStream_endElement(self, *args)


    def setAutoIndent(self, indent):
        """setAutoIndent(XMLOutputStream self, bool indent)"""
        return _libcombine.XMLOutputStream_setAutoIndent(self, indent)


    def startElement(self, *args):
        """
        startElement(XMLOutputStream self, string name, string prefix)
        startElement(XMLOutputStream self, string name)
        startElement(XMLOutputStream self, XMLTriple triple)
        """
        return _libcombine.XMLOutputStream_startElement(self, *args)


    def startEndElement(self, *args):
        """
        startEndElement(XMLOutputStream self, string name, string prefix)
        startEndElement(XMLOutputStream self, string name)
        startEndElement(XMLOutputStream self, XMLTriple triple)
        """
        return _libcombine.XMLOutputStream_startEndElement(self, *args)


    def writeAttribute(self, *args):
        """
        writeAttribute(XMLOutputStream self, string name, string value)
        writeAttribute(XMLOutputStream self, string name, string prefix, string value)
        writeAttribute(XMLOutputStream self, XMLTriple triple, string value)
        writeAttribute(XMLOutputStream self, string name, char const * value)
        writeAttribute(XMLOutputStream self, string name, string prefix, char const * value)
        writeAttribute(XMLOutputStream self, XMLTriple triple, char const * value)
        writeAttribute(XMLOutputStream self, string name, bool const & value)
        writeAttribute(XMLOutputStream self, string name, string prefix, bool const & value)
        writeAttribute(XMLOutputStream self, XMLTriple triple, bool const & value)
        writeAttribute(XMLOutputStream self, string name, double const & value)
        writeAttribute(XMLOutputStream self, string name, string prefix, double const & value)
        writeAttribute(XMLOutputStream self, XMLTriple triple, double const & value)
        writeAttribute(XMLOutputStream self, string name, long const & value)
        writeAttribute(XMLOutputStream self, string name, string prefix, long const & value)
        writeAttribute(XMLOutputStream self, XMLTriple triple, long const & value)
        writeAttribute(XMLOutputStream self, string name, int const & value)
        writeAttribute(XMLOutputStream self, string name, string prefix, int const & value)
        writeAttribute(XMLOutputStream self, XMLTriple triple, int const & value)
        writeAttribute(XMLOutputStream self, string name, string prefix, unsigned int const & value)
        """

        if type(args[1]) == type(True): return _libsedml.XMLOutputStream_writeAttributeBool(self, *args)


        return _libcombine.XMLOutputStream_writeAttribute(self, *args)


    def writeXMLDecl(self):
        """writeXMLDecl(XMLOutputStream self)"""
        return _libcombine.XMLOutputStream_writeXMLDecl(self)


    def writeComment(self, programName, programVersion, writeTimestamp=True):
        """
        writeComment(XMLOutputStream self, string programName, string programVersion, bool writeTimestamp=True)
        writeComment(XMLOutputStream self, string programName, string programVersion)
        """
        return _libcombine.XMLOutputStream_writeComment(self, programName, programVersion, writeTimestamp)


    def downIndent(self):
        """downIndent(XMLOutputStream self)"""
        return _libcombine.XMLOutputStream_downIndent(self)


    def upIndent(self):
        """upIndent(XMLOutputStream self)"""
        return _libcombine.XMLOutputStream_upIndent(self)


    def getSBMLNamespaces(self):
        """getSBMLNamespaces(XMLOutputStream self) -> SBMLNamespaces *"""
        return _libcombine.XMLOutputStream_getSBMLNamespaces(self)


    def setSBMLNamespaces(self, sbmlns):
        """setSBMLNamespaces(XMLOutputStream self, SBMLNamespaces * sbmlns)"""
        return _libcombine.XMLOutputStream_setSBMLNamespaces(self, sbmlns)


    def getWriteComment():
        """getWriteComment() -> bool"""
        return _libcombine.XMLOutputStream_getWriteComment()

    getWriteComment = staticmethod(getWriteComment)

    def setWriteComment(writeComment):
        """setWriteComment(bool writeComment)"""
        return _libcombine.XMLOutputStream_setWriteComment(writeComment)

    setWriteComment = staticmethod(setWriteComment)

    def getWriteTimestamp():
        """getWriteTimestamp() -> bool"""
        return _libcombine.XMLOutputStream_getWriteTimestamp()

    getWriteTimestamp = staticmethod(getWriteTimestamp)

    def setWriteTimestamp(writeTimestamp):
        """setWriteTimestamp(bool writeTimestamp)"""
        return _libcombine.XMLOutputStream_setWriteTimestamp(writeTimestamp)

    setWriteTimestamp = staticmethod(setWriteTimestamp)

    def getLibraryName():
        """getLibraryName() -> string"""
        return _libcombine.XMLOutputStream_getLibraryName()

    getLibraryName = staticmethod(getLibraryName)

    def setLibraryName(libraryName):
        """setLibraryName(string libraryName)"""
        return _libcombine.XMLOutputStream_setLibraryName(libraryName)

    setLibraryName = staticmethod(setLibraryName)

    def getLibraryVersion():
        """getLibraryVersion() -> string"""
        return _libcombine.XMLOutputStream_getLibraryVersion()

    getLibraryVersion = staticmethod(getLibraryVersion)

    def setLibraryVersion(libraryVersion):
        """setLibraryVersion(string libraryVersion)"""
        return _libcombine.XMLOutputStream_setLibraryVersion(libraryVersion)

    setLibraryVersion = staticmethod(setLibraryVersion)

    def getIndent(self):
        """getIndent(XMLOutputStream self) -> unsigned int"""
        return _libcombine.XMLOutputStream_getIndent(self)


    def setIndent(self, indent):
        """setIndent(XMLOutputStream self, unsigned int indent)"""
        return _libcombine.XMLOutputStream_setIndent(self, indent)


    def writeAttributeBool(self, *args):
        """
        writeAttributeBool(XMLOutputStream self, string name, bool const & value)
        writeAttributeBool(XMLOutputStream self, XMLTriple name, bool const & value)
        """
        return _libcombine.XMLOutputStream_writeAttributeBool(self, *args)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLOutputStream_swigregister = _libcombine.XMLOutputStream_swigregister
XMLOutputStream_swigregister(XMLOutputStream)

def XMLOutputStream_getWriteComment():
    """XMLOutputStream_getWriteComment() -> bool"""
    return _libcombine.XMLOutputStream_getWriteComment()

def XMLOutputStream_setWriteComment(writeComment):
    """XMLOutputStream_setWriteComment(bool writeComment)"""
    return _libcombine.XMLOutputStream_setWriteComment(writeComment)

def XMLOutputStream_getWriteTimestamp():
    """XMLOutputStream_getWriteTimestamp() -> bool"""
    return _libcombine.XMLOutputStream_getWriteTimestamp()

def XMLOutputStream_setWriteTimestamp(writeTimestamp):
    """XMLOutputStream_setWriteTimestamp(bool writeTimestamp)"""
    return _libcombine.XMLOutputStream_setWriteTimestamp(writeTimestamp)

def XMLOutputStream_getLibraryName():
    """XMLOutputStream_getLibraryName() -> string"""
    return _libcombine.XMLOutputStream_getLibraryName()

def XMLOutputStream_setLibraryName(libraryName):
    """XMLOutputStream_setLibraryName(string libraryName)"""
    return _libcombine.XMLOutputStream_setLibraryName(libraryName)

def XMLOutputStream_getLibraryVersion():
    """XMLOutputStream_getLibraryVersion() -> string"""
    return _libcombine.XMLOutputStream_getLibraryVersion()

def XMLOutputStream_setLibraryVersion(libraryVersion):
    """XMLOutputStream_setLibraryVersion(string libraryVersion)"""
    return _libcombine.XMLOutputStream_setLibraryVersion(libraryVersion)

class XMLOwningOutputStringStream(_object):
    """Proxy of C++ XMLOwningOutputStringStream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLOwningOutputStringStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLOwningOutputStringStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XMLOwningOutputStringStream self, string encoding, bool writeXMLDecl=True, string programName, string programVersion) -> XMLOwningOutputStringStream
        __init__(XMLOwningOutputStringStream self, string encoding, bool writeXMLDecl=True, string programName) -> XMLOwningOutputStringStream
        __init__(XMLOwningOutputStringStream self, string encoding, bool writeXMLDecl=True) -> XMLOwningOutputStringStream
        __init__(XMLOwningOutputStringStream self, string encoding) -> XMLOwningOutputStringStream
        __init__(XMLOwningOutputStringStream self) -> XMLOwningOutputStringStream
        """
        this = _libcombine.new_XMLOwningOutputStringStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_XMLOwningOutputStringStream
    __del__ = lambda self: None
XMLOwningOutputStringStream_swigregister = _libcombine.XMLOwningOutputStringStream_swigregister
XMLOwningOutputStringStream_swigregister(XMLOwningOutputStringStream)

class XMLOwningOutputFileStream(_object):
    """Proxy of C++ XMLOwningOutputFileStream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLOwningOutputFileStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLOwningOutputFileStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XMLOwningOutputFileStream self, string filename, string encoding, bool writeXMLDecl=True, string programName, string programVersion) -> XMLOwningOutputFileStream
        __init__(XMLOwningOutputFileStream self, string filename, string encoding, bool writeXMLDecl=True, string programName) -> XMLOwningOutputFileStream
        __init__(XMLOwningOutputFileStream self, string filename, string encoding, bool writeXMLDecl=True) -> XMLOwningOutputFileStream
        __init__(XMLOwningOutputFileStream self, string filename, string encoding) -> XMLOwningOutputFileStream
        __init__(XMLOwningOutputFileStream self, string filename) -> XMLOwningOutputFileStream
        """
        this = _libcombine.new_XMLOwningOutputFileStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_XMLOwningOutputFileStream
    __del__ = lambda self: None
XMLOwningOutputFileStream_swigregister = _libcombine.XMLOwningOutputFileStream_swigregister
XMLOwningOutputFileStream_swigregister(XMLOwningOutputFileStream)

class XMLInputStream(_object):
    """Proxy of C++ XMLInputStream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLInputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLInputStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XMLInputStream self, char const * content, bool isFile=True, string library, XMLErrorLog errorLog=None) -> XMLInputStream
        __init__(XMLInputStream self, char const * content, bool isFile=True, string library) -> XMLInputStream
        __init__(XMLInputStream self, char const * content, bool isFile=True) -> XMLInputStream
        __init__(XMLInputStream self, char const * content) -> XMLInputStream
        """
        this = _libcombine.new_XMLInputStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_XMLInputStream
    __del__ = lambda self: None

    def getEncoding(self):
        """getEncoding(XMLInputStream self) -> string"""
        return _libcombine.XMLInputStream_getEncoding(self)


    def getVersion(self):
        """getVersion(XMLInputStream self) -> string"""
        return _libcombine.XMLInputStream_getVersion(self)


    def getErrorLog(self):
        """getErrorLog(XMLInputStream self) -> XMLErrorLog"""
        return _libcombine.XMLInputStream_getErrorLog(self)


    def isEOF(self):
        """isEOF(XMLInputStream self) -> bool"""
        return _libcombine.XMLInputStream_isEOF(self)


    def isError(self):
        """isError(XMLInputStream self) -> bool"""
        return _libcombine.XMLInputStream_isError(self)


    def isGood(self):
        """isGood(XMLInputStream self) -> bool"""
        return _libcombine.XMLInputStream_isGood(self)


    def next(self):
        """next(XMLInputStream self) -> XMLToken"""
        return _libcombine.XMLInputStream_next(self)


    def peek(self):
        """peek(XMLInputStream self) -> XMLToken"""
        return _libcombine.XMLInputStream_peek(self)


    def skipPastEnd(self, element):
        """skipPastEnd(XMLInputStream self, XMLToken element)"""
        return _libcombine.XMLInputStream_skipPastEnd(self, element)


    def skipText(self):
        """skipText(XMLInputStream self)"""
        return _libcombine.XMLInputStream_skipText(self)


    def setErrorLog(self, log):
        """setErrorLog(XMLInputStream self, XMLErrorLog log) -> int"""
        return _libcombine.XMLInputStream_setErrorLog(self, log)


    def toString(self):
        """toString(XMLInputStream self) -> string"""
        return _libcombine.XMLInputStream_toString(self)


    def getSBMLNamespaces(self):
        """getSBMLNamespaces(XMLInputStream self) -> SBMLNamespaces *"""
        return _libcombine.XMLInputStream_getSBMLNamespaces(self)


    def setSBMLNamespaces(self, sbmlns):
        """setSBMLNamespaces(XMLInputStream self, SBMLNamespaces * sbmlns)"""
        return _libcombine.XMLInputStream_setSBMLNamespaces(self, sbmlns)


    def determineNumberChildren(self, *args):
        """
        determineNumberChildren(XMLInputStream self, string elementName) -> unsigned int
        determineNumberChildren(XMLInputStream self) -> unsigned int
        """
        return _libcombine.XMLInputStream_determineNumberChildren(self, *args)


    def determineNumSpecificChildren(self, childName, container):
        """determineNumSpecificChildren(XMLInputStream self, string childName, string container) -> unsigned int"""
        return _libcombine.XMLInputStream_determineNumSpecificChildren(self, childName, container)


    def containsChild(self, childName, container):
        """containsChild(XMLInputStream self, string childName, string container) -> bool"""
        return _libcombine.XMLInputStream_containsChild(self, childName, container)

XMLInputStream_swigregister = _libcombine.XMLInputStream_swigregister
XMLInputStream_swigregister(XMLInputStream)

XMLUnknownError = _libcombine.XMLUnknownError
XMLOutOfMemory = _libcombine.XMLOutOfMemory
XMLFileUnreadable = _libcombine.XMLFileUnreadable
XMLFileUnwritable = _libcombine.XMLFileUnwritable
XMLFileOperationError = _libcombine.XMLFileOperationError
XMLNetworkAccessError = _libcombine.XMLNetworkAccessError
InternalXMLParserError = _libcombine.InternalXMLParserError
UnrecognizedXMLParserCode = _libcombine.UnrecognizedXMLParserCode
XMLTranscoderError = _libcombine.XMLTranscoderError
MissingXMLDecl = _libcombine.MissingXMLDecl
MissingXMLEncoding = _libcombine.MissingXMLEncoding
BadXMLDecl = _libcombine.BadXMLDecl
BadXMLDOCTYPE = _libcombine.BadXMLDOCTYPE
InvalidCharInXML = _libcombine.InvalidCharInXML
BadlyFormedXML = _libcombine.BadlyFormedXML
UnclosedXMLToken = _libcombine.UnclosedXMLToken
InvalidXMLConstruct = _libcombine.InvalidXMLConstruct
XMLTagMismatch = _libcombine.XMLTagMismatch
DuplicateXMLAttribute = _libcombine.DuplicateXMLAttribute
UndefinedXMLEntity = _libcombine.UndefinedXMLEntity
BadProcessingInstruction = _libcombine.BadProcessingInstruction
BadXMLPrefix = _libcombine.BadXMLPrefix
BadXMLPrefixValue = _libcombine.BadXMLPrefixValue
MissingXMLRequiredAttribute = _libcombine.MissingXMLRequiredAttribute
XMLAttributeTypeMismatch = _libcombine.XMLAttributeTypeMismatch
XMLBadUTF8Content = _libcombine.XMLBadUTF8Content
MissingXMLAttributeValue = _libcombine.MissingXMLAttributeValue
BadXMLAttributeValue = _libcombine.BadXMLAttributeValue
BadXMLAttribute = _libcombine.BadXMLAttribute
UnrecognizedXMLElement = _libcombine.UnrecognizedXMLElement
BadXMLComment = _libcombine.BadXMLComment
BadXMLDeclLocation = _libcombine.BadXMLDeclLocation
XMLUnexpectedEOF = _libcombine.XMLUnexpectedEOF
BadXMLIDValue = _libcombine.BadXMLIDValue
BadXMLIDRef = _libcombine.BadXMLIDRef
UninterpretableXMLContent = _libcombine.UninterpretableXMLContent
BadXMLDocumentStructure = _libcombine.BadXMLDocumentStructure
InvalidAfterXMLContent = _libcombine.InvalidAfterXMLContent
XMLExpectedQuotedString = _libcombine.XMLExpectedQuotedString
XMLEmptyValueNotPermitted = _libcombine.XMLEmptyValueNotPermitted
XMLBadNumber = _libcombine.XMLBadNumber
XMLBadColon = _libcombine.XMLBadColon
MissingXMLElements = _libcombine.MissingXMLElements
XMLContentEmpty = _libcombine.XMLContentEmpty
XMLErrorCodesUpperBound = _libcombine.XMLErrorCodesUpperBound
LIBSBML_CAT_INTERNAL = _libcombine.LIBSBML_CAT_INTERNAL
LIBSBML_CAT_SYSTEM = _libcombine.LIBSBML_CAT_SYSTEM
LIBSBML_CAT_XML = _libcombine.LIBSBML_CAT_XML
LIBSBML_SEV_INFO = _libcombine.LIBSBML_SEV_INFO
LIBSBML_SEV_WARNING = _libcombine.LIBSBML_SEV_WARNING
LIBSBML_SEV_ERROR = _libcombine.LIBSBML_SEV_ERROR
LIBSBML_SEV_FATAL = _libcombine.LIBSBML_SEV_FATAL
LIBSBML_OVERRIDE_DISABLED = _libcombine.LIBSBML_OVERRIDE_DISABLED
LIBSBML_OVERRIDE_DONT_LOG = _libcombine.LIBSBML_OVERRIDE_DONT_LOG
LIBSBML_OVERRIDE_WARNING = _libcombine.LIBSBML_OVERRIDE_WARNING
LIBSBML_OVERRIDE_ERROR = _libcombine.LIBSBML_OVERRIDE_ERROR
class XMLError(_object):
    """Proxy of C++ XMLError class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XMLError self, int const errorId=0, string details, unsigned int const line=0, unsigned int const column=0, unsigned int const severity=LIBSBML_SEV_FATAL, unsigned int const category=LIBSBML_CAT_INTERNAL) -> XMLError
        __init__(XMLError self, int const errorId=0, string details, unsigned int const line=0, unsigned int const column=0, unsigned int const severity=LIBSBML_SEV_FATAL) -> XMLError
        __init__(XMLError self, int const errorId=0, string details, unsigned int const line=0, unsigned int const column=0) -> XMLError
        __init__(XMLError self, int const errorId=0, string details, unsigned int const line=0) -> XMLError
        __init__(XMLError self, int const errorId=0, string details) -> XMLError
        __init__(XMLError self, int const errorId=0) -> XMLError
        __init__(XMLError self) -> XMLError
        __init__(XMLError self, XMLError orig) -> XMLError
        """
        this = _libcombine.new_XMLError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_XMLError
    __del__ = lambda self: None

    def getErrorId(self):
        """getErrorId(XMLError self) -> unsigned int"""
        return _libcombine.XMLError_getErrorId(self)


    def getMessage(self):
        """getMessage(XMLError self) -> string"""
        return _libcombine.XMLError_getMessage(self)


    def getShortMessage(self):
        """getShortMessage(XMLError self) -> string"""
        return _libcombine.XMLError_getShortMessage(self)


    def getLine(self):
        """getLine(XMLError self) -> unsigned int"""
        return _libcombine.XMLError_getLine(self)


    def getColumn(self):
        """getColumn(XMLError self) -> unsigned int"""
        return _libcombine.XMLError_getColumn(self)


    def getSeverity(self):
        """getSeverity(XMLError self) -> unsigned int"""
        return _libcombine.XMLError_getSeverity(self)


    def getSeverityAsString(self):
        """getSeverityAsString(XMLError self) -> string"""
        return _libcombine.XMLError_getSeverityAsString(self)


    def getCategory(self):
        """getCategory(XMLError self) -> unsigned int"""
        return _libcombine.XMLError_getCategory(self)


    def getCategoryAsString(self):
        """getCategoryAsString(XMLError self) -> string"""
        return _libcombine.XMLError_getCategoryAsString(self)


    def isInfo(self):
        """isInfo(XMLError self) -> bool"""
        return _libcombine.XMLError_isInfo(self)


    def isWarning(self):
        """isWarning(XMLError self) -> bool"""
        return _libcombine.XMLError_isWarning(self)


    def isError(self):
        """isError(XMLError self) -> bool"""
        return _libcombine.XMLError_isError(self)


    def isFatal(self):
        """isFatal(XMLError self) -> bool"""
        return _libcombine.XMLError_isFatal(self)


    def isInternal(self):
        """isInternal(XMLError self) -> bool"""
        return _libcombine.XMLError_isInternal(self)


    def isSystem(self):
        """isSystem(XMLError self) -> bool"""
        return _libcombine.XMLError_isSystem(self)


    def isXML(self):
        """isXML(XMLError self) -> bool"""
        return _libcombine.XMLError_isXML(self)


    def isValid(self):
        """isValid(XMLError self) -> bool"""
        return _libcombine.XMLError_isValid(self)


    def setLine(self, line):
        """setLine(XMLError self, unsigned int line) -> int"""
        return _libcombine.XMLError_setLine(self, line)


    def setColumn(self, column):
        """setColumn(XMLError self, unsigned int column) -> int"""
        return _libcombine.XMLError_setColumn(self, column)


    def getStandardMessage(code):
        """getStandardMessage(int const code) -> string"""
        return _libcombine.XMLError_getStandardMessage(code)

    getStandardMessage = staticmethod(getStandardMessage)

    def getPackage(self):
        """getPackage(XMLError self) -> string"""
        return _libcombine.XMLError_getPackage(self)


    def getErrorIdOffset(self):
        """getErrorIdOffset(XMLError self) -> unsigned int"""
        return _libcombine.XMLError_getErrorIdOffset(self)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLError_swigregister = _libcombine.XMLError_swigregister
XMLError_swigregister(XMLError)

def XMLError_getStandardMessage(code):
    """XMLError_getStandardMessage(int const code) -> string"""
    return _libcombine.XMLError_getStandardMessage(code)

class XMLErrorLog(_object):
    """Proxy of C++ XMLErrorLog class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLErrorLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLErrorLog, name)
    __repr__ = _swig_repr

    def getNumErrors(self):
        """getNumErrors(XMLErrorLog self) -> unsigned int"""
        return _libcombine.XMLErrorLog_getNumErrors(self)


    def getError(self, n):
        """getError(XMLErrorLog self, unsigned int n) -> XMLError"""
        return _libcombine.XMLErrorLog_getError(self, n)


    def clearLog(self):
        """clearLog(XMLErrorLog self)"""
        return _libcombine.XMLErrorLog_clearLog(self)


    def __init__(self, *args):
        """
        __init__(XMLErrorLog self) -> XMLErrorLog
        __init__(XMLErrorLog self, XMLErrorLog other) -> XMLErrorLog
        """
        this = _libcombine.new_XMLErrorLog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_XMLErrorLog
    __del__ = lambda self: None

    def add(self, *args):
        """
        add(XMLErrorLog self, XMLError error)
        add(XMLErrorLog self, XmlErrorStdVector errors)
        """
        return _libcombine.XMLErrorLog_add(self, *args)


    def toString(self):
        """toString(XMLErrorLog self) -> string"""
        return _libcombine.XMLErrorLog_toString(self)


    def printErrors(self, *args):
        """
        printErrors(XMLErrorLog self, ostream stream)
        printErrors(XMLErrorLog self)
        printErrors(XMLErrorLog self, ostream stream, unsigned int severity)
        """
        return _libcombine.XMLErrorLog_printErrors(self, *args)


    def isSeverityOverridden(self):
        """isSeverityOverridden(XMLErrorLog self) -> bool"""
        return _libcombine.XMLErrorLog_isSeverityOverridden(self)


    def unsetSeverityOverride(self):
        """unsetSeverityOverride(XMLErrorLog self)"""
        return _libcombine.XMLErrorLog_unsetSeverityOverride(self)


    def getSeverityOverride(self):
        """getSeverityOverride(XMLErrorLog self) -> XMLErrorSeverityOverride_t"""
        return _libcombine.XMLErrorLog_getSeverityOverride(self)


    def setSeverityOverride(self, severity):
        """setSeverityOverride(XMLErrorLog self, XMLErrorSeverityOverride_t severity)"""
        return _libcombine.XMLErrorLog_setSeverityOverride(self, severity)


    def changeErrorSeverity(self, *args):
        """
        changeErrorSeverity(XMLErrorLog self, XMLErrorSeverity_t originalSeverity, XMLErrorSeverity_t targetSeverity, string package)
        changeErrorSeverity(XMLErrorLog self, XMLErrorSeverity_t originalSeverity, XMLErrorSeverity_t targetSeverity)
        """
        return _libcombine.XMLErrorLog_changeErrorSeverity(self, *args)


    def contains(self, errorId):
        """contains(XMLErrorLog self, unsigned int const errorId) -> bool"""
        return _libcombine.XMLErrorLog_contains(self, errorId)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLErrorLog_swigregister = _libcombine.XMLErrorLog_swigregister
XMLErrorLog_swigregister(XMLErrorLog)

class ASTNode(_object):
    """Proxy of C++ ASTNode class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASTNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ASTNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ASTNode self, ASTNodeType_t type) -> ASTNode
        __init__(ASTNode self) -> ASTNode
        __init__(ASTNode self, ASTNode orig) -> ASTNode
        """
        this = _libcombine.new_ASTNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_ASTNode
    __del__ = lambda self: None

    def freeName(self):
        """freeName(ASTNode self) -> int"""
        return _libcombine.ASTNode_freeName(self)


    def canonicalize(self):
        """canonicalize(ASTNode self) -> bool"""
        return _libcombine.ASTNode_canonicalize(self)


    def addChild(self, disownedChild, inRead=False):
        """
        addChild(ASTNode self, ASTNode disownedChild, bool inRead=False) -> int
        addChild(ASTNode self, ASTNode disownedChild) -> int
        """

        if args[0] is not None: args[0].thisown = 0


        return _libcombine.ASTNode_addChild(self, disownedChild, inRead)


    def prependChild(self, disownedChild):
        """prependChild(ASTNode self, ASTNode disownedChild) -> int"""

        if args[0] is not None: args[0].thisown = 0


        return _libcombine.ASTNode_prependChild(self, disownedChild)


    def removeChild(self, n):
        """removeChild(ASTNode self, unsigned int n) -> int"""
        return _libcombine.ASTNode_removeChild(self, n)


    def replaceChild(self, n, disownedChild, delreplaced=False):
        """
        replaceChild(ASTNode self, unsigned int n, ASTNode disownedChild, bool delreplaced=False) -> int
        replaceChild(ASTNode self, unsigned int n, ASTNode disownedChild) -> int
        """

        if args[1] is not None: args[1].thisown = 0


        return _libcombine.ASTNode_replaceChild(self, n, disownedChild, delreplaced)


    def insertChild(self, n, disownedChild):
        """insertChild(ASTNode self, unsigned int n, ASTNode disownedChild) -> int"""

        if args[1] is not None: args[1].thisown = 0


        return _libcombine.ASTNode_insertChild(self, n, disownedChild)


    def deepCopy(self):
        """deepCopy(ASTNode self) -> ASTNode"""
        return _libcombine.ASTNode_deepCopy(self)


    def getChild(self, n):
        """getChild(ASTNode self, unsigned int n) -> ASTNode"""
        return _libcombine.ASTNode_getChild(self, n)


    def getLeftChild(self):
        """getLeftChild(ASTNode self) -> ASTNode"""
        return _libcombine.ASTNode_getLeftChild(self)


    def getRightChild(self):
        """getRightChild(ASTNode self) -> ASTNode"""
        return _libcombine.ASTNode_getRightChild(self)


    def getNumChildren(self):
        """getNumChildren(ASTNode self) -> unsigned int"""
        return _libcombine.ASTNode_getNumChildren(self)


    def addSemanticsAnnotation(self, disownedAnnotation):
        """addSemanticsAnnotation(ASTNode self, XMLNode disownedAnnotation) -> int"""

        if args[0] is not None: args[0].thisown = 0


        return _libcombine.ASTNode_addSemanticsAnnotation(self, disownedAnnotation)


    def getNumSemanticsAnnotations(self):
        """getNumSemanticsAnnotations(ASTNode self) -> unsigned int"""
        return _libcombine.ASTNode_getNumSemanticsAnnotations(self)


    def getSemanticsAnnotation(self, n):
        """getSemanticsAnnotation(ASTNode self, unsigned int n) -> XMLNode"""
        return _libcombine.ASTNode_getSemanticsAnnotation(self, n)


    def getCharacter(self):
        """getCharacter(ASTNode self) -> char"""
        return _libcombine.ASTNode_getCharacter(self)


    def getId(self):
        """getId(ASTNode self) -> string"""
        return _libcombine.ASTNode_getId(self)


    def getClass(self):
        """getClass(ASTNode self) -> string"""
        return _libcombine.ASTNode_getClass(self)


    def getStyle(self):
        """getStyle(ASTNode self) -> string"""
        return _libcombine.ASTNode_getStyle(self)


    def getInteger(self):
        """getInteger(ASTNode self) -> long"""
        return _libcombine.ASTNode_getInteger(self)


    def getName(self):
        """getName(ASTNode self) -> char const *"""
        return _libcombine.ASTNode_getName(self)


    def getOperatorName(self):
        """getOperatorName(ASTNode self) -> char const *"""
        return _libcombine.ASTNode_getOperatorName(self)


    def getNumerator(self):
        """getNumerator(ASTNode self) -> long"""
        return _libcombine.ASTNode_getNumerator(self)


    def getDenominator(self):
        """getDenominator(ASTNode self) -> long"""
        return _libcombine.ASTNode_getDenominator(self)


    def getReal(self):
        """getReal(ASTNode self) -> double"""
        return _libcombine.ASTNode_getReal(self)


    def getMantissa(self):
        """getMantissa(ASTNode self) -> double"""
        return _libcombine.ASTNode_getMantissa(self)


    def getExponent(self):
        """getExponent(ASTNode self) -> long"""
        return _libcombine.ASTNode_getExponent(self)


    def getValue(self):
        """getValue(ASTNode self) -> double"""
        return _libcombine.ASTNode_getValue(self)


    def getPrecedence(self):
        """getPrecedence(ASTNode self) -> int"""
        return _libcombine.ASTNode_getPrecedence(self)


    def getType(self):
        """getType(ASTNode self) -> ASTNodeType_t"""
        return _libcombine.ASTNode_getType(self)


    def getUnits(self):
        """getUnits(ASTNode self) -> string"""
        return _libcombine.ASTNode_getUnits(self)


    def isAvogadro(self):
        """isAvogadro(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isAvogadro(self)


    def isBoolean(self):
        """isBoolean(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isBoolean(self)


    def returnsBoolean(self, model=None):
        """
        returnsBoolean(ASTNode self, Model const * model=None) -> bool
        returnsBoolean(ASTNode self) -> bool
        """
        return _libcombine.ASTNode_returnsBoolean(self, model)


    def isConstant(self):
        """isConstant(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isConstant(self)


    def isCiNumber(self):
        """isCiNumber(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isCiNumber(self)


    def isConstantNumber(self):
        """isConstantNumber(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isConstantNumber(self)


    def isCSymbolFunction(self):
        """isCSymbolFunction(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isCSymbolFunction(self)


    def isFunction(self):
        """isFunction(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isFunction(self)


    def isInfinity(self):
        """isInfinity(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isInfinity(self)


    def isInteger(self):
        """isInteger(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isInteger(self)


    def isLambda(self):
        """isLambda(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isLambda(self)


    def isLog10(self):
        """isLog10(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isLog10(self)


    def isLogical(self):
        """isLogical(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isLogical(self)


    def isName(self):
        """isName(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isName(self)


    def isNaN(self):
        """isNaN(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isNaN(self)


    def isNegInfinity(self):
        """isNegInfinity(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isNegInfinity(self)


    def isNumber(self):
        """isNumber(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isNumber(self)


    def isOperator(self):
        """isOperator(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isOperator(self)


    def isPiecewise(self):
        """isPiecewise(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isPiecewise(self)


    def isRational(self):
        """isRational(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isRational(self)


    def isReal(self):
        """isReal(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isReal(self)


    def isRelational(self):
        """isRelational(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isRelational(self)


    def isSqrt(self):
        """isSqrt(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isSqrt(self)


    def isUMinus(self):
        """isUMinus(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isUMinus(self)


    def isUPlus(self):
        """isUPlus(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isUPlus(self)


    def isUserFunction(self):
        """isUserFunction(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isUserFunction(self)


    def hasTypeAndNumChildren(self, type, numchildren):
        """hasTypeAndNumChildren(ASTNode self, ASTNodeType_t type, unsigned int numchildren) -> int"""
        return _libcombine.ASTNode_hasTypeAndNumChildren(self, type, numchildren)


    def isUnknown(self):
        """isUnknown(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isUnknown(self)


    def isSetId(self):
        """isSetId(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isSetId(self)


    def isSetClass(self):
        """isSetClass(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isSetClass(self)


    def isSetStyle(self):
        """isSetStyle(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isSetStyle(self)


    def isSetUnits(self):
        """isSetUnits(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isSetUnits(self)


    def hasUnits(self):
        """hasUnits(ASTNode self) -> bool"""
        return _libcombine.ASTNode_hasUnits(self)


    def setCharacter(self, value):
        """setCharacter(ASTNode self, char value) -> int"""
        return _libcombine.ASTNode_setCharacter(self, value)


    def setId(self, id):
        """setId(ASTNode self, string id) -> int"""
        return _libcombine.ASTNode_setId(self, id)


    def setClass(self, className):
        """setClass(ASTNode self, string className) -> int"""
        return _libcombine.ASTNode_setClass(self, className)


    def setStyle(self, style):
        """setStyle(ASTNode self, string style) -> int"""
        return _libcombine.ASTNode_setStyle(self, style)


    def setName(self, name):
        """setName(ASTNode self, char const * name) -> int"""
        return _libcombine.ASTNode_setName(self, name)


    def setValue(self, *args):
        """
        setValue(ASTNode self, long value) -> int
        setValue(ASTNode self, long numerator, long denominator) -> int
        setValue(ASTNode self, double value) -> int
        setValue(ASTNode self, double mantissa, long exponent) -> int
        """
        return _libcombine.ASTNode_setValue(self, *args)


    def setType(self, type):
        """setType(ASTNode self, ASTNodeType_t type) -> int"""
        return _libcombine.ASTNode_setType(self, type)


    def setUnits(self, units):
        """setUnits(ASTNode self, string units) -> int"""
        return _libcombine.ASTNode_setUnits(self, units)


    def swapChildren(self, that):
        """swapChildren(ASTNode self, ASTNode that) -> int"""
        return _libcombine.ASTNode_swapChildren(self, that)


    def renameSIdRefs(self, oldid, newid):
        """renameSIdRefs(ASTNode self, string oldid, string newid)"""
        return _libcombine.ASTNode_renameSIdRefs(self, oldid, newid)


    def renameUnitSIdRefs(self, oldid, newid):
        """renameUnitSIdRefs(ASTNode self, string oldid, string newid)"""
        return _libcombine.ASTNode_renameUnitSIdRefs(self, oldid, newid)


    def replaceIDWithFunction(self, id, function):
        """replaceIDWithFunction(ASTNode self, string id, ASTNode function)"""
        return _libcombine.ASTNode_replaceIDWithFunction(self, id, function)


    def multiplyTimeBy(self, function):
        """multiplyTimeBy(ASTNode self, ASTNode function)"""
        return _libcombine.ASTNode_multiplyTimeBy(self, function)


    def unsetUnits(self):
        """unsetUnits(ASTNode self) -> int"""
        return _libcombine.ASTNode_unsetUnits(self)


    def unsetId(self):
        """unsetId(ASTNode self) -> int"""
        return _libcombine.ASTNode_unsetId(self)


    def unsetClass(self):
        """unsetClass(ASTNode self) -> int"""
        return _libcombine.ASTNode_unsetClass(self)


    def unsetStyle(self):
        """unsetStyle(ASTNode self) -> int"""
        return _libcombine.ASTNode_unsetStyle(self)


    def getDefinitionURL(self):
        """getDefinitionURL(ASTNode self) -> XMLAttributes"""
        return _libcombine.ASTNode_getDefinitionURL(self)


    def replaceArgument(self, bvar, arg):
        """replaceArgument(ASTNode self, string bvar, ASTNode arg)"""
        return _libcombine.ASTNode_replaceArgument(self, bvar, arg)


    def getParentSBMLObject(self):
        """getParentSBMLObject(ASTNode self) -> SBase *"""
        return _libcombine.ASTNode_getParentSBMLObject(self)


    def unsetParentSBMLObject(self):
        """unsetParentSBMLObject(ASTNode self) -> int"""
        return _libcombine.ASTNode_unsetParentSBMLObject(self)


    def isSetParentSBMLObject(self):
        """isSetParentSBMLObject(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isSetParentSBMLObject(self)


    def reduceToBinary(self):
        """reduceToBinary(ASTNode self)"""
        return _libcombine.ASTNode_reduceToBinary(self)


    def unsetUserData(self):
        """unsetUserData(ASTNode self) -> int"""
        return _libcombine.ASTNode_unsetUserData(self)


    def isSetUserData(self):
        """isSetUserData(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isSetUserData(self)


    def isWellFormedASTNode(self):
        """isWellFormedASTNode(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isWellFormedASTNode(self)


    def hasCorrectNumberArguments(self):
        """hasCorrectNumberArguments(ASTNode self) -> bool"""
        return _libcombine.ASTNode_hasCorrectNumberArguments(self)


    def getDefinitionURLString(self):
        """getDefinitionURLString(ASTNode self) -> string"""
        return _libcombine.ASTNode_getDefinitionURLString(self)


    def representsBvar(self):
        """representsBvar(ASTNode self) -> bool"""
        return _libcombine.ASTNode_representsBvar(self)


    def isBvar(self):
        """isBvar(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isBvar(self)


    def setBvar(self):
        """setBvar(ASTNode self)"""
        return _libcombine.ASTNode_setBvar(self)


    def usesL3V2MathConstructs(self):
        """usesL3V2MathConstructs(ASTNode self) -> bool"""
        return _libcombine.ASTNode_usesL3V2MathConstructs(self)


    def usesRateOf(self):
        """usesRateOf(ASTNode self) -> bool"""
        return _libcombine.ASTNode_usesRateOf(self)


    def isQualifier(self):
        """isQualifier(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isQualifier(self)


    def isSemantics(self):
        """isSemantics(ASTNode self) -> bool"""
        return _libcombine.ASTNode_isSemantics(self)


    def getNumBvars(self):
        """getNumBvars(ASTNode self) -> unsigned int"""
        return _libcombine.ASTNode_getNumBvars(self)


    def addPlugin(self, plugin):
        """addPlugin(ASTNode self, ASTBasePlugin * plugin)"""
        return _libcombine.ASTNode_addPlugin(self, plugin)


    def loadASTPlugins(self, sbmlns):
        """loadASTPlugins(ASTNode self, SBMLNamespaces const * sbmlns)"""
        return _libcombine.ASTNode_loadASTPlugins(self, sbmlns)


    def loadASTPlugin(self, pkgName):
        """loadASTPlugin(ASTNode self, string pkgName)"""
        return _libcombine.ASTNode_loadASTPlugin(self, pkgName)


    def getASTPlugin(self, *args):
        """
        getASTPlugin(ASTNode self, SBMLNamespaces const * sbmlns) -> ASTBasePlugin
        getASTPlugin(ASTNode self, ASTNodeType_t type) -> ASTBasePlugin
        getASTPlugin(ASTNode self, string name, bool isCsymbol=False, bool strCmpIsCaseSensitive=False) -> ASTBasePlugin
        getASTPlugin(ASTNode self, string name, bool isCsymbol=False) -> ASTBasePlugin
        getASTPlugin(ASTNode self, string name) -> ASTBasePlugin
        getASTPlugin(ASTNode self, SBMLNamespaces const * sbmlns) -> ASTBasePlugin const
        getASTPlugin(ASTNode self, ASTNodeType_t type) -> ASTBasePlugin const
        getASTPlugin(ASTNode self, string name, bool isCsymbol=False, bool strCmpIsCaseSensitive=False) -> ASTBasePlugin const
        getASTPlugin(ASTNode self, string name, bool isCsymbol=False) -> ASTBasePlugin const
        getASTPlugin(ASTNode self, string name) -> ASTBasePlugin const *
        """
        return _libcombine.ASTNode_getASTPlugin(self, *args)


    def getPlugin(self, *args):
        """
        getPlugin(ASTNode self, string package) -> ASTBasePlugin
        getPlugin(ASTNode self, string package) -> ASTBasePlugin const
        getPlugin(ASTNode self, unsigned int n) -> ASTBasePlugin
        getPlugin(ASTNode self, unsigned int n) -> ASTBasePlugin const *
        """
        return _libcombine.ASTNode_getPlugin(self, *args)


    def getNumPlugins(self):
        """getNumPlugins(ASTNode self) -> unsigned int"""
        return _libcombine.ASTNode_getNumPlugins(self)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True


    def getListOfNodes(self):
        """getListOfNodes(ASTNode self) -> ASTNodeList"""
        return _libcombine.ASTNode_getListOfNodes(self)

ASTNode_swigregister = _libcombine.ASTNode_swigregister
ASTNode_swigregister(ASTNode)


def readMathMLFromString(xml):
    """readMathMLFromString(char const * xml) -> ASTNode"""
    return _libcombine.readMathMLFromString(xml)

def readMathMLFromStringWithNamespaces(xml, xmlns):
    """readMathMLFromStringWithNamespaces(char const * xml, XMLNamespaces_t * xmlns) -> ASTNode"""
    return _libcombine.readMathMLFromStringWithNamespaces(xml, xmlns)

def writeMathMLToString(node):
    """writeMathMLToString(ASTNode node) -> char *"""
    return _libcombine.writeMathMLToString(node)

def writeMathMLWithNamespaceToString(node, sbmlns):
    """writeMathMLWithNamespaceToString(ASTNode node, SBMLNamespaces_t * sbmlns) -> char *"""
    return _libcombine.writeMathMLWithNamespaceToString(node, sbmlns)

def parseFormula(formula):
    """parseFormula(char const * formula) -> ASTNode"""
    return _libcombine.parseFormula(formula)

def formulaToL3String(tree):
    """formulaToL3String(ASTNode tree) -> char *"""
    return _libcombine.formulaToL3String(tree)

def formulaToL3StringWithSettings(tree, settings):
    """formulaToL3StringWithSettings(ASTNode tree, L3ParserSettings_t const * settings) -> char *"""
    return _libcombine.formulaToL3StringWithSettings(tree, settings)

def formulaToString(tree):
    """formulaToString(ASTNode tree) -> char *"""
    return _libcombine.formulaToString(tree)

def parseL3Formula(formula):
    """parseL3Formula(char const * formula) -> ASTNode"""
    return _libcombine.parseL3Formula(formula)

def parseL3FormulaWithModel(formula, model):
    """parseL3FormulaWithModel(char const * formula, Model_t const * model) -> ASTNode"""
    return _libcombine.parseL3FormulaWithModel(formula, model)

def parseL3FormulaWithSettings(formula, settings):
    """parseL3FormulaWithSettings(char const * formula, L3ParserSettings_t const * settings) -> ASTNode"""
    return _libcombine.parseL3FormulaWithSettings(formula, settings)

def getDefaultL3ParserSettings():
    """getDefaultL3ParserSettings() -> L3ParserSettings_t *"""
    return _libcombine.getDefaultL3ParserSettings()

def getLastParseL3Error():
    """getLastParseL3Error() -> char *"""
    return _libcombine.getLastParseL3Error()

def SBML_deleteL3Parser():
    """SBML_deleteL3Parser()"""
    return _libcombine.SBML_deleteL3Parser()
L3P_PARSE_LOG_AS_LOG10 = _libcombine.L3P_PARSE_LOG_AS_LOG10
L3P_PARSE_LOG_AS_LN = _libcombine.L3P_PARSE_LOG_AS_LN
L3P_PARSE_LOG_AS_ERROR = _libcombine.L3P_PARSE_LOG_AS_ERROR
L3P_COLLAPSE_UNARY_MINUS = _libcombine.L3P_COLLAPSE_UNARY_MINUS
L3P_EXPAND_UNARY_MINUS = _libcombine.L3P_EXPAND_UNARY_MINUS
L3P_PARSE_UNITS = _libcombine.L3P_PARSE_UNITS
L3P_NO_UNITS = _libcombine.L3P_NO_UNITS
L3P_AVOGADRO_IS_CSYMBOL = _libcombine.L3P_AVOGADRO_IS_CSYMBOL
L3P_AVOGADRO_IS_NAME = _libcombine.L3P_AVOGADRO_IS_NAME
L3P_COMPARE_BUILTINS_CASE_INSENSITIVE = _libcombine.L3P_COMPARE_BUILTINS_CASE_INSENSITIVE
L3P_COMPARE_BUILTINS_CASE_SENSITIVE = _libcombine.L3P_COMPARE_BUILTINS_CASE_SENSITIVE
L3P_MODULO_IS_REM = _libcombine.L3P_MODULO_IS_REM
L3P_MODULO_IS_PIECEWISE = _libcombine.L3P_MODULO_IS_PIECEWISE
L3P_PARSE_L3V2_FUNCTIONS_DIRECTLY = _libcombine.L3P_PARSE_L3V2_FUNCTIONS_DIRECTLY
L3P_PARSE_L3V2_FUNCTIONS_AS_GENERIC = _libcombine.L3P_PARSE_L3V2_FUNCTIONS_AS_GENERIC
L3P_PARSE_PACKAGE_MATH_DIRECTLY = _libcombine.L3P_PARSE_PACKAGE_MATH_DIRECTLY
L3P_PARSE_PACKAGE_MATH_AS_GENERIC = _libcombine.L3P_PARSE_PACKAGE_MATH_AS_GENERIC
INFIX_SYNTAX_NAMED_SQUARE_BRACKETS = _libcombine.INFIX_SYNTAX_NAMED_SQUARE_BRACKETS
INFIX_SYNTAX_CURLY_BRACES = _libcombine.INFIX_SYNTAX_CURLY_BRACES
INFIX_SYNTAX_CURLY_BRACES_SEMICOLON = _libcombine.INFIX_SYNTAX_CURLY_BRACES_SEMICOLON
class L3ParserSettings(_object):
    """Proxy of C++ L3ParserSettings class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, L3ParserSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, L3ParserSettings, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(L3ParserSettings self) -> L3ParserSettings
        __init__(L3ParserSettings self, Model * model, ParseLogType_t parselog, bool collapseminus, bool parseunits, bool avocsymbol, bool caseSensitive=False, SBMLNamespaces * sbmlns=None, bool moduloL3v2=False, bool l3v2functions=False) -> L3ParserSettings
        __init__(L3ParserSettings self, Model * model, ParseLogType_t parselog, bool collapseminus, bool parseunits, bool avocsymbol, bool caseSensitive=False, SBMLNamespaces * sbmlns=None, bool moduloL3v2=False) -> L3ParserSettings
        __init__(L3ParserSettings self, Model * model, ParseLogType_t parselog, bool collapseminus, bool parseunits, bool avocsymbol, bool caseSensitive=False, SBMLNamespaces * sbmlns=None) -> L3ParserSettings
        __init__(L3ParserSettings self, Model * model, ParseLogType_t parselog, bool collapseminus, bool parseunits, bool avocsymbol, bool caseSensitive=False) -> L3ParserSettings
        __init__(L3ParserSettings self, Model * model, ParseLogType_t parselog, bool collapseminus, bool parseunits, bool avocsymbol) -> L3ParserSettings
        __init__(L3ParserSettings self, L3ParserSettings source) -> L3ParserSettings
        """
        this = _libcombine.new_L3ParserSettings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_L3ParserSettings
    __del__ = lambda self: None

    def setModel(self, model):
        """setModel(L3ParserSettings self, Model const * model)"""
        return _libcombine.L3ParserSettings_setModel(self, model)


    def getModel(self):
        """getModel(L3ParserSettings self) -> Model const *"""
        return _libcombine.L3ParserSettings_getModel(self)


    def unsetModel(self):
        """unsetModel(L3ParserSettings self)"""
        return _libcombine.L3ParserSettings_unsetModel(self)


    def setParseLog(self, type):
        """setParseLog(L3ParserSettings self, ParseLogType_t type)"""
        return _libcombine.L3ParserSettings_setParseLog(self, type)


    def getParseLog(self):
        """getParseLog(L3ParserSettings self) -> ParseLogType_t"""
        return _libcombine.L3ParserSettings_getParseLog(self)


    def setParseCollapseMinus(self, collapseminus):
        """setParseCollapseMinus(L3ParserSettings self, bool collapseminus)"""
        return _libcombine.L3ParserSettings_setParseCollapseMinus(self, collapseminus)


    def getParseCollapseMinus(self):
        """getParseCollapseMinus(L3ParserSettings self) -> bool"""
        return _libcombine.L3ParserSettings_getParseCollapseMinus(self)


    def setParseUnits(self, units):
        """setParseUnits(L3ParserSettings self, bool units)"""
        return _libcombine.L3ParserSettings_setParseUnits(self, units)


    def getParseUnits(self):
        """getParseUnits(L3ParserSettings self) -> bool"""
        return _libcombine.L3ParserSettings_getParseUnits(self)


    def setParseAvogadroCsymbol(self, l2only):
        """setParseAvogadroCsymbol(L3ParserSettings self, bool l2only)"""
        return _libcombine.L3ParserSettings_setParseAvogadroCsymbol(self, l2only)


    def getParseAvogadroCsymbol(self):
        """getParseAvogadroCsymbol(L3ParserSettings self) -> bool"""
        return _libcombine.L3ParserSettings_getParseAvogadroCsymbol(self)


    def setComparisonCaseSensitivity(self, strcmp):
        """setComparisonCaseSensitivity(L3ParserSettings self, bool strcmp)"""
        return _libcombine.L3ParserSettings_setComparisonCaseSensitivity(self, strcmp)


    def getComparisonCaseSensitivity(self):
        """getComparisonCaseSensitivity(L3ParserSettings self) -> bool"""
        return _libcombine.L3ParserSettings_getComparisonCaseSensitivity(self)


    def setParseModuloL3v2(self, modulol3v2):
        """setParseModuloL3v2(L3ParserSettings self, bool modulol3v2)"""
        return _libcombine.L3ParserSettings_setParseModuloL3v2(self, modulol3v2)


    def getParseModuloL3v2(self):
        """getParseModuloL3v2(L3ParserSettings self) -> bool"""
        return _libcombine.L3ParserSettings_getParseModuloL3v2(self)


    def setParseL3v2Functions(self, l3v2functions):
        """setParseL3v2Functions(L3ParserSettings self, bool l3v2functions)"""
        return _libcombine.L3ParserSettings_setParseL3v2Functions(self, l3v2functions)


    def getParseL3v2Functions(self):
        """getParseL3v2Functions(L3ParserSettings self) -> bool"""
        return _libcombine.L3ParserSettings_getParseL3v2Functions(self)


    def setParsePackageMath(self, package, parsepackage):
        """setParsePackageMath(L3ParserSettings self, ExtendedMathType_t package, bool parsepackage)"""
        return _libcombine.L3ParserSettings_setParsePackageMath(self, package, parsepackage)


    def getParsePackageMath(self, package):
        """getParsePackageMath(L3ParserSettings self, ExtendedMathType_t package) -> bool"""
        return _libcombine.L3ParserSettings_getParsePackageMath(self, package)


    def visitPackageInfixSyntax(self, parent, node, sb):
        """visitPackageInfixSyntax(L3ParserSettings self, ASTNode parent, ASTNode node, StringBuffer_t * sb)"""
        return _libcombine.L3ParserSettings_visitPackageInfixSyntax(self, parent, node, sb)

L3ParserSettings_swigregister = _libcombine.L3ParserSettings_swigregister
L3ParserSettings_swigregister(L3ParserSettings)

class CaReader(_object):
    """Proxy of C++ CaReader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaReader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CaReader self) -> CaReader"""
        this = _libcombine.new_CaReader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_CaReader
    __del__ = lambda self: None

    def readOMEX(*args):
      """
      readOMEX(self, string filename) -> CaOmexManifest

      Reads an SEDML document from a file.

      This method is identical to readOMEXFromFile().

      If the file named 'filename' does not exist or its content is not
      valid SEDML, one or more errors will be logged with the CaOmexManifest
      object returned by this method.  Callers can use the methods on
      CaOmexManifest such as CaOmexManifest.getNumErrors() and
      CaOmexManifest.getError() to get the errors.  The object returned by
      CaOmexManifest.getError() is an CaError object, and it has methods to
      get the error code, category, and severity level of the problem, as
      well as a textual description of the problem.  The possible severity
      levels range from informational messages to fatal errors; see the
      documentation for CaError for more information.

      If the file 'filename' could not be read, the file-reading error will
      appear first.  The error code can provide a clue about what happened.
      For example, a file might be unreadable (either because it does not
      actually exist or because the user does not have the necessary access
      priviledges to read it) or some sort of file operation error may have
      been reported by the underlying operating system.  Callers can check
      for these situations using a program fragment such as the following:

       reader = CaReader()
       doc    = reader.readOMEX(filename)

       if doc.getNumErrors() > 0:
         if doc.getError(0).getErrorId() == libsedml.XMLFileUnreadable:
    # Handle case of unreadable file here.
         elif doc.getError(0).getErrorId() == libsedml.XMLFileOperationError:
    # Handle case of other file error here.
         else:
    # Handle other error cases here.

      If the given filename ends with the suffix \".gz\" (for example,
      \"myfile.xml.gz\"), the file is assumed to be compressed in gzip format
      and will be automatically decompressed upon reading.  Similarly, if the
      given filename ends with \".zip\" or \".bz2\", the file is assumed to be
      compressed in zip or bzip2 format (respectively).  Files whose names
      lack these suffixes will be read uncompressed.  Note that if the file
      is in zip format but the archive contains more than one file, only the
      first file in the archive will be read and the rest ignored.

      To read a gzip/zip file, libSEDML needs to be configured and linked with
      the zlib library at compile time.  It also needs to be linked with the
      bzip2 library to read files in bzip2 format.  (Both of these are the
      default configurations for libSEDML.)  Errors about unreadable files
      will be logged if a compressed filename is given and libSEDML was not
      linked with the corresponding required library.

      Parameter 'filename is the name or full pathname of the file to be
      read.

      Returns a pointer to the CaOmexManifest created from the SEDML content.

      See also CaError.

      Note:

      LibSEDML versions 2.x and later versions behave differently in
      error handling in several respects.  One difference is how early some
      errors are caught and whether libSEDML continues processing a file in
      the face of some early errors.  In general, libSEDML versions after 2.x
      stop parsing SEDML inputs sooner than libSEDML version 2.x in the face
      of XML errors, because the errors may invalidate any further SEDML
      content.  For example, a missing XML declaration at the beginning of
      the file was ignored by libSEDML 2.x but in version 3.x and later, it
      will cause libSEDML to stop parsing the rest of the input altogether.
      While this behavior may seem more severe and intolerant, it was
      necessary in order to provide uniform behavior regardless of which
      underlying XML parser (Expat, Xerces, libxml2) is being used by
      libSEDML.  The XML parsers themselves behave differently in their error
      reporting, and sometimes libSEDML has to resort to the lowest common
      denominator.
      """
      args_copy    = list(args)
      args_copy[1] = conditional_abspath(args[1])
      return _libsedml.CaReader_readOMEX(*args_copy)



    def readOMEXFromFile(*args):
      """
      readOMEXFromFile(self, string filename) -> CaOmexManifest

      Reads an SEDML document from a file.

      This method is identical to readOMEXFromFile().

      If the file named 'filename' does not exist or its content is not
      valid SEDML, one or more errors will be logged with the CaOmexManifest
      object returned by this method.  Callers can use the methods on
      CaOmexManifest such as CaOmexManifest.getNumErrors() and
      CaOmexManifest.getError() to get the errors.  The object returned by
      CaOmexManifest.getError() is an CaError object, and it has methods to
      get the error code, category, and severity level of the problem, as
      well as a textual description of the problem.  The possible severity
      levels range from informational messages to fatal errors; see the
      documentation for CaError for more information.

      If the file 'filename' could not be read, the file-reading error will
      appear first.  The error code can provide a clue about what happened.
      For example, a file might be unreadable (either because it does not
      actually exist or because the user does not have the necessary access
      priviledges to read it) or some sort of file operation error may have
      been reported by the underlying operating system.  Callers can check
      for these situations using a program fragment such as the following:

       reader = CaReader()
       doc    = reader.readOMEX(filename)

       if doc.getNumErrors() > 0:
         if doc.getError(0).getErrorId() == libsedml.XMLFileUnreadable:
    # Handle case of unreadable file here.
         elif doc.getError(0).getErrorId() == libsedml.XMLFileOperationError:
    # Handle case of other file error here.
         else:
    # Handle other error cases here.

      If the given filename ends with the suffix \".gz\" (for example,
      \"myfile.xml.gz\"), the file is assumed to be compressed in gzip format
      and will be automatically decompressed upon reading.  Similarly, if the
      given filename ends with \".zip\" or \".bz2\", the file is assumed to be
      compressed in zip or bzip2 format (respectively).  Files whose names
      lack these suffixes will be read uncompressed.  Note that if the file
      is in zip format but the archive contains more than one file, only the
      first file in the archive will be read and the rest ignored.

      To read a gzip/zip file, libSEDML needs to be configured and linked with
      the zlib library at compile time.  It also needs to be linked with the
      bzip2 library to read files in bzip2 format.  (Both of these are the
      default configurations for libSEDML.)  Errors about unreadable files
      will be logged if a compressed filename is given and libSEDML was not
      linked with the corresponding required library.

      Parameter 'filename is the name or full pathname of the file to be
      read.

      Returns a pointer to the CaOmexManifest created from the SEDML content.

      See also CaError.

      Note:

      LibSEDML versions 2.x and later versions behave differently in
      error handling in several respects.  One difference is how early some
      errors are caught and whether libSEDML continues processing a file in
      the face of some early errors.  In general, libSEDML versions after 2.x
      stop parsing SEDML inputs sooner than libSEDML version 2.x in the face
      of XML errors, because the errors may invalidate any further SEDML
      content.  For example, a missing XML declaration at the beginning of
      the file was ignored by libSEDML 2.x but in version 3.x and later, it
      will cause libSEDML to stop parsing the rest of the input altogether.
      While this behavior may seem more severe and intolerant, it was
      necessary in order to provide uniform behavior regardless of which
      underlying XML parser (Expat, Xerces, libxml2) is being used by
      libSEDML.  The XML parsers themselves behave differently in their error
      reporting, and sometimes libSEDML has to resort to the lowest common
      denominator.
      """
      args_copy    = list(args)
      args_copy[1] = conditional_abspath(args[1])
      return _libsedml.CaReader_readOMEX(*args_copy)



    def readOMEXFromString(self, xml):
        """readOMEXFromString(CaReader self, string xml) -> CaOmexManifest"""
        return _libcombine.CaReader_readOMEXFromString(self, xml)


    def hasZlib():
        """hasZlib() -> bool"""
        return _libcombine.CaReader_hasZlib()

    hasZlib = staticmethod(hasZlib)

    def hasBzip2():
        """hasBzip2() -> bool"""
        return _libcombine.CaReader_hasBzip2()

    hasBzip2 = staticmethod(hasBzip2)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

CaReader_swigregister = _libcombine.CaReader_swigregister
CaReader_swigregister(CaReader)

def CaReader_hasZlib():
    """CaReader_hasZlib() -> bool"""
    return _libcombine.CaReader_hasZlib()

def CaReader_hasBzip2():
    """CaReader_hasBzip2() -> bool"""
    return _libcombine.CaReader_hasBzip2()


def readOMEXFromFile(filename):
    """readOMEXFromFile(char const * filename) -> CaOmexManifest"""
    return _libcombine.readOMEXFromFile(filename)

def readOMEXFromString(xml):
    """readOMEXFromString(char const * xml) -> CaOmexManifest"""
    return _libcombine.readOMEXFromString(xml)
class CaWriter(_object):
    """Proxy of C++ CaWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaWriter, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CaWriter self) -> CaWriter"""
        this = _libcombine.new_CaWriter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_CaWriter
    __del__ = lambda self: None

    def setProgramName(self, name):
        """setProgramName(CaWriter self, string name) -> int"""
        return _libcombine.CaWriter_setProgramName(self, name)


    def setProgramVersion(self, version):
        """setProgramVersion(CaWriter self, string version) -> int"""
        return _libcombine.CaWriter_setProgramVersion(self, version)


    def writeOMEX(self, *args):
        """
        writeOMEX(CaWriter self, CaOmexManifest d, string filename) -> bool
        writeOMEX(CaWriter self, CaOmexManifest d, ostream stream) -> bool
        """
        return _libcombine.CaWriter_writeOMEX(self, *args)


    def writeToString(self, d):
        """writeToString(CaWriter self, CaOmexManifest d) -> char *"""
        return _libcombine.CaWriter_writeToString(self, d)


    def writeOMEXToFile(self, d, filename):
        """writeOMEXToFile(CaWriter self, CaOmexManifest d, string filename) -> bool"""
        return _libcombine.CaWriter_writeOMEXToFile(self, d, filename)


    def writeOMEXToString(self, d):
        """writeOMEXToString(CaWriter self, CaOmexManifest d) -> char *"""
        return _libcombine.CaWriter_writeOMEXToString(self, d)


    def hasZlib():
        """hasZlib() -> bool"""
        return _libcombine.CaWriter_hasZlib()

    hasZlib = staticmethod(hasZlib)

    def hasBzip2():
        """hasBzip2() -> bool"""
        return _libcombine.CaWriter_hasBzip2()

    hasBzip2 = staticmethod(hasBzip2)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

CaWriter_swigregister = _libcombine.CaWriter_swigregister
CaWriter_swigregister(CaWriter)

def CaWriter_hasZlib():
    """CaWriter_hasZlib() -> bool"""
    return _libcombine.CaWriter_hasZlib()

def CaWriter_hasBzip2():
    """CaWriter_hasBzip2() -> bool"""
    return _libcombine.CaWriter_hasBzip2()


def writeOMEX(d, filename):
    """writeOMEX(CaOmexManifest d, char const * filename) -> int"""
    return _libcombine.writeOMEX(d, filename)

def writeOMEXToString(d):
    """writeOMEXToString(CaOmexManifest d) -> char *"""
    return _libcombine.writeOMEXToString(d)

def writeOMEXToFile(d, filename):
    """writeOMEXToFile(CaOmexManifest d, char const * filename) -> int"""
    return _libcombine.writeOMEXToFile(d, filename)
OMEX_UNKNOWN = _libcombine.OMEX_UNKNOWN
LIB_COMBINE_CONTENT = _libcombine.LIB_COMBINE_CONTENT
LIB_COMBINE_OMEXMANIFEST = _libcombine.LIB_COMBINE_OMEXMANIFEST
LIB_COMBINE_CROSSREF = _libcombine.LIB_COMBINE_CROSSREF
OMEX_LIST_OF = _libcombine.OMEX_LIST_OF

def CaTypeCode_toString(tc):
    """CaTypeCode_toString(int tc) -> char const *"""
    return _libcombine.CaTypeCode_toString(tc)
class CaBase(_object):
    """Proxy of C++ CaBase class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_CaBase
    __del__ = lambda self: None

    def clone(self):
        """clone(CaBase self) -> CaBase"""
        return _libcombine.CaBase_clone(self)


    def getElementBySId(self, *args):
        """
        getElementBySId(CaBase self, string id) -> CaBase
        getElementBySId(CaBase self, string metaid) -> CaBase
        """
        return _libcombine.CaBase_getElementBySId(self, *args)


    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(CaBase self, string metaid) -> CaBase
        getElementByMetaId(CaBase self, string metaid) -> CaBase
        """
        return _libcombine.CaBase_getElementByMetaId(self, *args)


    def getMetaId(self):
        """getMetaId(CaBase self) -> string"""
        return _libcombine.CaBase_getMetaId(self)


    def getId(self):
        """getId(CaBase self) -> string"""
        return _libcombine.CaBase_getId(self)


    def getNotes(self, *args):
        """
        getNotes(CaBase self) -> XMLNode
        getNotes(CaBase self) -> XMLNode
        """
        return _libcombine.CaBase_getNotes(self, *args)


    def getNotesString(self, *args):
        """
        getNotesString(CaBase self) -> string
        getNotesString(CaBase self) -> string
        """
        return _libcombine.CaBase_getNotesString(self, *args)


    def getAnnotation(self, *args):
        """
        getAnnotation(CaBase self) -> XMLNode
        getAnnotation(CaBase self) -> XMLNode
        """
        return _libcombine.CaBase_getAnnotation(self, *args)


    def getAnnotationString(self, *args):
        """
        getAnnotationString(CaBase self) -> string
        getAnnotationString(CaBase self) -> string
        """
        return _libcombine.CaBase_getAnnotationString(self, *args)


    def getNamespaces(self, *args):
        """
        getNamespaces(CaBase self) -> XMLNamespaces
        getNamespaces(CaBase self) -> XMLNamespaces
        """
        return _libcombine.CaBase_getNamespaces(self, *args)


    def getCaOmexManifest(self, *args):
        """
        getCaOmexManifest(CaBase self) -> CaOmexManifest
        getCaOmexManifest(CaBase self) -> CaOmexManifest
        """
        return _libcombine.CaBase_getCaOmexManifest(self, *args)


    def getParentCaObject(self, *args):
        """
        getParentCaObject(CaBase self) -> CaBase
        getParentCaObject(CaBase self) -> CaBase
        """
        return _libcombine.CaBase_getParentCaObject(self, *args)


    def getAncestorOfType(self, *args):
        """
        getAncestorOfType(CaBase self, int type) -> CaBase
        getAncestorOfType(CaBase self, int type) -> CaBase
        """
        return _libcombine.CaBase_getAncestorOfType(self, *args)


    def getLine(self):
        """getLine(CaBase self) -> unsigned int"""
        return _libcombine.CaBase_getLine(self)


    def getColumn(self):
        """getColumn(CaBase self) -> unsigned int"""
        return _libcombine.CaBase_getColumn(self)


    def isSetMetaId(self):
        """isSetMetaId(CaBase self) -> bool"""
        return _libcombine.CaBase_isSetMetaId(self)


    def isSetId(self):
        """isSetId(CaBase self) -> bool"""
        return _libcombine.CaBase_isSetId(self)


    def isSetNotes(self):
        """isSetNotes(CaBase self) -> bool"""
        return _libcombine.CaBase_isSetNotes(self)


    def isSetAnnotation(self):
        """isSetAnnotation(CaBase self) -> bool"""
        return _libcombine.CaBase_isSetAnnotation(self)


    def setMetaId(self, metaid):
        """setMetaId(CaBase self, string metaid) -> int"""
        return _libcombine.CaBase_setMetaId(self, metaid)


    def setId(self, sid):
        """setId(CaBase self, string sid) -> int"""
        return _libcombine.CaBase_setId(self, sid)


    def setAnnotation(self, *args):
        """
        setAnnotation(CaBase self, XMLNode annotation) -> int
        setAnnotation(CaBase self, string annotation) -> int
        """
        return _libcombine.CaBase_setAnnotation(self, *args)


    def appendAnnotation(self, *args):
        """
        appendAnnotation(CaBase self, XMLNode annotation) -> int
        appendAnnotation(CaBase self, string annotation) -> int
        """
        return _libcombine.CaBase_appendAnnotation(self, *args)


    def removeTopLevelAnnotationElement(self, *args):
        """
        removeTopLevelAnnotationElement(CaBase self, string elementName, string elementURI) -> int
        removeTopLevelAnnotationElement(CaBase self, string elementName) -> int
        """
        return _libcombine.CaBase_removeTopLevelAnnotationElement(self, *args)


    def replaceTopLevelAnnotationElement(self, *args):
        """
        replaceTopLevelAnnotationElement(CaBase self, XMLNode annotation) -> int
        replaceTopLevelAnnotationElement(CaBase self, string annotation) -> int
        """
        return _libcombine.CaBase_replaceTopLevelAnnotationElement(self, *args)


    def setNotes(self, *args):
        """
        setNotes(CaBase self, XMLNode notes) -> int
        setNotes(CaBase self, string notes, bool addXHTMLMarkup=False) -> int
        setNotes(CaBase self, string notes) -> int
        """
        return _libcombine.CaBase_setNotes(self, *args)


    def appendNotes(self, *args):
        """
        appendNotes(CaBase self, XMLNode notes) -> int
        appendNotes(CaBase self, string notes) -> int
        """
        return _libcombine.CaBase_appendNotes(self, *args)


    def connectToParent(self, parent):
        """connectToParent(CaBase self, CaBase parent)"""
        return _libcombine.CaBase_connectToParent(self, parent)


    def connectToChild(self):
        """connectToChild(CaBase self)"""
        return _libcombine.CaBase_connectToChild(self)


    def setNamespaces(self, xmlns):
        """setNamespaces(CaBase self, XMLNamespaces xmlns) -> int"""
        return _libcombine.CaBase_setNamespaces(self, xmlns)


    def unsetMetaId(self):
        """unsetMetaId(CaBase self) -> int"""
        return _libcombine.CaBase_unsetMetaId(self)


    def unsetId(self):
        """unsetId(CaBase self) -> int"""
        return _libcombine.CaBase_unsetId(self)


    def unsetNotes(self):
        """unsetNotes(CaBase self) -> int"""
        return _libcombine.CaBase_unsetNotes(self)


    def unsetAnnotation(self):
        """unsetAnnotation(CaBase self) -> int"""
        return _libcombine.CaBase_unsetAnnotation(self)


    def getLevel(self):
        """getLevel(CaBase self) -> unsigned int"""
        return _libcombine.CaBase_getLevel(self)


    def getVersion(self):
        """getVersion(CaBase self) -> unsigned int"""
        return _libcombine.CaBase_getVersion(self)


    def getTypeCode(self):
        """getTypeCode(CaBase self) -> int"""
        return _libcombine.CaBase_getTypeCode(self)


    def hasValidLevelVersionNamespaceCombination(self):
        """hasValidLevelVersionNamespaceCombination(CaBase self) -> bool"""
        return _libcombine.CaBase_hasValidLevelVersionNamespaceCombination(self)


    def getElementName(self):
        """getElementName(CaBase self) -> string"""
        return _libcombine.CaBase_getElementName(self)


    def toCa(self):
        """toCa(CaBase self) -> char *"""
        return _libcombine.CaBase_toCa(self)


    def read(self, stream):
        """read(CaBase self, XMLInputStream stream)"""
        return _libcombine.CaBase_read(self, stream)


    def write(self, stream):
        """write(CaBase self, XMLOutputStream stream)"""
        return _libcombine.CaBase_write(self, stream)


    def hasRequiredAttributes(self):
        """hasRequiredAttributes(CaBase self) -> bool"""
        return _libcombine.CaBase_hasRequiredAttributes(self)


    def hasRequiredElements(self):
        """hasRequiredElements(CaBase self) -> bool"""
        return _libcombine.CaBase_hasRequiredElements(self)


    def checkCompatibility(self, object):
        """checkCompatibility(CaBase self, CaBase object) -> int"""
        return _libcombine.CaBase_checkCompatibility(self, object)


    def setCaNamespaces(self, omexns):
        """setCaNamespaces(CaBase self, CaNamespaces omexns) -> int"""
        return _libcombine.CaBase_setCaNamespaces(self, omexns)


    def setCaNamespacesAndOwn(self, disownedNs):
        """setCaNamespacesAndOwn(CaBase self, CaNamespaces disownedNs)"""
        return _libcombine.CaBase_setCaNamespacesAndOwn(self, disownedNs)


    def getCaNamespaces(self):
        """getCaNamespaces(CaBase self) -> CaNamespaces"""
        return _libcombine.CaBase_getCaNamespaces(self)


    def removeFromParentAndDelete(self):
        """removeFromParentAndDelete(CaBase self) -> int"""
        return _libcombine.CaBase_removeFromParentAndDelete(self)


    def matchesCaNamespaces(self, *args):
        """
        matchesCaNamespaces(CaBase self, CaBase sb) -> bool
        matchesCaNamespaces(CaBase self, CaBase sb) -> bool
        """
        return _libcombine.CaBase_matchesCaNamespaces(self, *args)


    def matchesRequiredCaNamespacesForAddition(self, *args):
        """
        matchesRequiredCaNamespacesForAddition(CaBase self, CaBase sb) -> bool
        matchesRequiredCaNamespacesForAddition(CaBase self, CaBase sb) -> bool
        """
        return _libcombine.CaBase_matchesRequiredCaNamespacesForAddition(self, *args)


    def isSetUserData(self):
        """isSetUserData(CaBase self) -> bool"""
        return _libcombine.CaBase_isSetUserData(self)


    def unsetUserData(self):
        """unsetUserData(CaBase self) -> int"""
        return _libcombine.CaBase_unsetUserData(self)


    def getErrorLog(self):
        """getErrorLog(CaBase self) -> CaErrorLog"""
        return _libcombine.CaBase_getErrorLog(self)


    __metaclass__ = AutoProperty


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True


    def getListOfAllElements(self):
        """getListOfAllElements(CaBase self) -> CaBaseList"""
        return _libcombine.CaBase_getListOfAllElements(self)

CaBase_swigregister = _libcombine.CaBase_swigregister
CaBase_swigregister(CaBase)

class CaListOf(CaBase):
    """Proxy of C++ CaListOf class."""

    __swig_setmethods__ = {}
    for _s in [CaBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaListOf, name, value)
    __swig_getmethods__ = {}
    for _s in [CaBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaListOf, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_CaListOf
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(CaListOf self, unsigned int level, unsigned int version) -> CaListOf
        __init__(CaListOf self, unsigned int level) -> CaListOf
        __init__(CaListOf self) -> CaListOf
        __init__(CaListOf self, CaNamespaces omexns) -> CaListOf
        __init__(CaListOf self, CaListOf orig) -> CaListOf
        """
        this = _libcombine.new_CaListOf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CaListOf self) -> CaListOf"""
        return _libcombine.CaListOf_clone(self)


    def append(self, item):
        """append(CaListOf self, CaBase item) -> int"""
        return _libcombine.CaListOf_append(self, item)


    def appendAndOwn(self, disownedItem):
        """appendAndOwn(CaListOf self, CaBase disownedItem) -> int"""
        return _libcombine.CaListOf_appendAndOwn(self, disownedItem)


    def appendFrom(self, list):
        """appendFrom(CaListOf self, CaListOf list) -> int"""
        return _libcombine.CaListOf_appendFrom(self, list)


    def insert(self, location, item):
        """insert(CaListOf self, int location, CaBase item) -> int"""
        return _libcombine.CaListOf_insert(self, location, item)


    def insertAndOwn(self, location, disownedItem):
        """insertAndOwn(CaListOf self, int location, CaBase disownedItem) -> int"""
        return _libcombine.CaListOf_insertAndOwn(self, location, disownedItem)


    def get(self, *args):
        """
        get(CaListOf self, unsigned int n) -> CaBase
        get(CaListOf self, unsigned int n) -> CaBase
        """
        return _libcombine.CaListOf_get(self, *args)


    def getElementBySId(self, id):
        """getElementBySId(CaListOf self, string id) -> CaBase"""
        return _libcombine.CaListOf_getElementBySId(self, id)


    def getElementByMetaId(self, metaid):
        """getElementByMetaId(CaListOf self, string metaid) -> CaBase"""
        return _libcombine.CaListOf_getElementByMetaId(self, metaid)


    def clear(self, doDelete=True):
        """
        clear(CaListOf self, bool doDelete=True)
        clear(CaListOf self)
        """
        return _libcombine.CaListOf_clear(self, doDelete)


    def removeFromParentAndDelete(self):
        """removeFromParentAndDelete(CaListOf self) -> int"""
        return _libcombine.CaListOf_removeFromParentAndDelete(self)


    def remove(self, n):
        """remove(CaListOf self, unsigned int n) -> CaBase"""
        return _libcombine.CaListOf_remove(self, n)


    def size(self):
        """size(CaListOf self) -> unsigned int"""
        return _libcombine.CaListOf_size(self)


    def connectToChild(self):
        """connectToChild(CaListOf self)"""
        return _libcombine.CaListOf_connectToChild(self)


    def getTypeCode(self):
        """getTypeCode(CaListOf self) -> int"""
        return _libcombine.CaListOf_getTypeCode(self)


    def getItemTypeCode(self):
        """getItemTypeCode(CaListOf self) -> int"""
        return _libcombine.CaListOf_getItemTypeCode(self)


    def getElementName(self):
        """getElementName(CaListOf self) -> string"""
        return _libcombine.CaListOf_getElementName(self)


    def __len__(self):
        """__len__(CaListOf self) -> int"""
        return _libcombine.CaListOf___len__(self)


    def __getitem__(self, key):

      try:
         keyIsSlice = isinstance(key, slice)
      except:
         keyIsSlice = 0

      if keyIsSlice:
        start = key.start
        if start is None:
          start = 0
        stop = key.stop
        if stop is None:
          stop = self.size()
        return [self[i] for i in range(
          self._fixNegativeIndex(start), self._fixNegativeIndex(stop)
        )]

      key = self._fixNegativeIndex(key)
      if key < 0 or key >= self.size():
        raise IndexError(key)
      return self.get(key)


    def _fixNegativeIndex(self, index):
      if index < 0:
        return index + self.size()
      else:
        return index


    def __iter__(self):
      for i in range(self.size()):
        yield self[i]


    def __repr__(self):
      return "[" + ", ".join([repr(self[i]) for i in range(len(self))]) + "]"


    def __str__(self):
      return repr(self)

CaListOf_swigregister = _libcombine.CaListOf_swigregister
CaListOf_swigregister(CaListOf)

class CaOmexManifest(CaBase):
    """Proxy of C++ CaOmexManifest class."""

    __swig_setmethods__ = {}
    for _s in [CaBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaOmexManifest, name, value)
    __swig_getmethods__ = {}
    for _s in [CaBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaOmexManifest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CaOmexManifest self) -> CaOmexManifest
        __init__(CaOmexManifest self, CaNamespaces omexns) -> CaOmexManifest
        __init__(CaOmexManifest self, CaOmexManifest orig) -> CaOmexManifest
        """
        this = _libcombine.new_CaOmexManifest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CaOmexManifest self) -> CaOmexManifest"""
        return _libcombine.CaOmexManifest_clone(self)

    __swig_destroy__ = _libcombine.delete_CaOmexManifest
    __del__ = lambda self: None

    def getListOfContents(self, *args):
        """
        getListOfContents(CaOmexManifest self) -> CaListOfContents
        getListOfContents(CaOmexManifest self) -> CaListOfContents
        """
        return _libcombine.CaOmexManifest_getListOfContents(self, *args)


    def getContent(self, *args):
        """
        getContent(CaOmexManifest self, unsigned int n) -> CaContent
        getContent(CaOmexManifest self, unsigned int n) -> CaContent
        """
        return _libcombine.CaOmexManifest_getContent(self, *args)


    def addContent(self, cc):
        """addContent(CaOmexManifest self, CaContent cc) -> int"""
        return _libcombine.CaOmexManifest_addContent(self, cc)


    def getNumContents(self):
        """getNumContents(CaOmexManifest self) -> unsigned int"""
        return _libcombine.CaOmexManifest_getNumContents(self)


    def createContent(self):
        """createContent(CaOmexManifest self) -> CaContent"""
        return _libcombine.CaOmexManifest_createContent(self)


    def removeContent(self, n):
        """removeContent(CaOmexManifest self, unsigned int n) -> CaContent"""
        return _libcombine.CaOmexManifest_removeContent(self, n)


    def getElementName(self):
        """getElementName(CaOmexManifest self) -> string"""
        return _libcombine.CaOmexManifest_getElementName(self)


    def getTypeCode(self):
        """getTypeCode(CaOmexManifest self) -> int"""
        return _libcombine.CaOmexManifest_getTypeCode(self)


    def hasRequiredElements(self):
        """hasRequiredElements(CaOmexManifest self) -> bool"""
        return _libcombine.CaOmexManifest_hasRequiredElements(self)


    def connectToChild(self):
        """connectToChild(CaOmexManifest self)"""
        return _libcombine.CaOmexManifest_connectToChild(self)


    def getElementBySId(self, id):
        """getElementBySId(CaOmexManifest self, string id) -> CaBase"""
        return _libcombine.CaOmexManifest_getElementBySId(self, id)


    def getNamespaces(self, *args):
        """
        getNamespaces(CaOmexManifest self) -> XMLNamespaces
        getNamespaces(CaOmexManifest self) -> XMLNamespaces
        """
        return _libcombine.CaOmexManifest_getNamespaces(self, *args)


    def getErrorLog(self, *args):
        """
        getErrorLog(CaOmexManifest self) -> CaErrorLog
        getErrorLog(CaOmexManifest self) -> CaErrorLog
        """
        return _libcombine.CaOmexManifest_getErrorLog(self, *args)


    def getError(self, *args):
        """
        getError(CaOmexManifest self, unsigned int n) -> CaError
        getError(CaOmexManifest self, unsigned int n) -> CaError
        """
        return _libcombine.CaOmexManifest_getError(self, *args)


    def getNumErrors(self, *args):
        """
        getNumErrors(CaOmexManifest self) -> unsigned int
        getNumErrors(CaOmexManifest self, unsigned int severity) -> unsigned int
        """
        return _libcombine.CaOmexManifest_getNumErrors(self, *args)


    def getLevel(self):
        """getLevel(CaOmexManifest self) -> unsigned int"""
        return _libcombine.CaOmexManifest_getLevel(self)


    def getVersion(self):
        """getVersion(CaOmexManifest self) -> unsigned int"""
        return _libcombine.CaOmexManifest_getVersion(self)

CaOmexManifest_swigregister = _libcombine.CaOmexManifest_swigregister
CaOmexManifest_swigregister(CaOmexManifest)

class CaErrorLog(XMLErrorLog):
    """Proxy of C++ CaErrorLog class."""

    __swig_setmethods__ = {}
    for _s in [XMLErrorLog]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaErrorLog, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLErrorLog]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaErrorLog, name)
    __repr__ = _swig_repr

    def getError(self, n):
        """getError(CaErrorLog self, unsigned int n) -> CaError"""
        return _libcombine.CaErrorLog_getError(self, n)


    def getErrorWithSeverity(self, n, severity):
        """getErrorWithSeverity(CaErrorLog self, unsigned int n, unsigned int severity) -> CaError"""
        return _libcombine.CaErrorLog_getErrorWithSeverity(self, n, severity)


    def getNumFailsWithSeverity(self, *args):
        """
        getNumFailsWithSeverity(CaErrorLog self, unsigned int severity) -> unsigned int
        getNumFailsWithSeverity(CaErrorLog self, unsigned int severity) -> unsigned int
        """
        return _libcombine.CaErrorLog_getNumFailsWithSeverity(self, *args)


    def __init__(self, *args):
        """
        __init__(CaErrorLog self) -> CaErrorLog
        __init__(CaErrorLog self, CaErrorLog other) -> CaErrorLog
        """
        this = _libcombine.new_CaErrorLog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_CaErrorLog
    __del__ = lambda self: None

    def logError(self, *args):
        """
        logError(CaErrorLog self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details, unsigned int const line=0, unsigned int const column=0, unsigned int const severity=LIBCOMBINE_SEV_ERROR, unsigned int const category=LIBCOMBINE_CAT_OMEX)
        logError(CaErrorLog self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details, unsigned int const line=0, unsigned int const column=0, unsigned int const severity=LIBCOMBINE_SEV_ERROR)
        logError(CaErrorLog self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details, unsigned int const line=0, unsigned int const column=0)
        logError(CaErrorLog self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details, unsigned int const line=0)
        logError(CaErrorLog self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details)
        logError(CaErrorLog self, unsigned int const errorId=0, unsigned int const level, unsigned int const version)
        logError(CaErrorLog self, unsigned int const errorId=0, unsigned int const level)
        logError(CaErrorLog self, unsigned int const errorId=0)
        logError(CaErrorLog self)
        """
        return _libcombine.CaErrorLog_logError(self, *args)


    def add(self, error):
        """add(CaErrorLog self, CaError error)"""
        return _libcombine.CaErrorLog_add(self, error)


    def remove(self, errorId):
        """remove(CaErrorLog self, unsigned int const errorId)"""
        return _libcombine.CaErrorLog_remove(self, errorId)


    def removeAll(self, errorId):
        """removeAll(CaErrorLog self, unsigned int const errorId)"""
        return _libcombine.CaErrorLog_removeAll(self, errorId)


    def contains(self, errorId):
        """contains(CaErrorLog self, unsigned int const errorId) -> bool"""
        return _libcombine.CaErrorLog_contains(self, errorId)

CaErrorLog_swigregister = _libcombine.CaErrorLog_swigregister
CaErrorLog_swigregister(CaErrorLog)

CaUnknown = _libcombine.CaUnknown
CaNotUTF8 = _libcombine.CaNotUTF8
CaUnrecognizedElement = _libcombine.CaUnrecognizedElement
CaNotSchemaConformant = _libcombine.CaNotSchemaConformant
CaInvalidMathElement = _libcombine.CaInvalidMathElement
CaMissingAnnotationNamespace = _libcombine.CaMissingAnnotationNamespace
CaDuplicateAnnotationNamespaces = _libcombine.CaDuplicateAnnotationNamespaces
CaNamespaceInAnnotation = _libcombine.CaNamespaceInAnnotation
CaMultipleAnnotations = _libcombine.CaMultipleAnnotations
CaAnnotationNotElement = _libcombine.CaAnnotationNotElement
CaNotesNotInXHTMLNamespace = _libcombine.CaNotesNotInXHTMLNamespace
CaNotesContainsXMLDecl = _libcombine.CaNotesContainsXMLDecl
CaNotesContainsDOCTYPE = _libcombine.CaNotesContainsDOCTYPE
CaInvalidNotesContent = _libcombine.CaInvalidNotesContent
CaOnlyOneNotesElementAllowed = _libcombine.CaOnlyOneNotesElementAllowed
CombineNSUndeclared = _libcombine.CombineNSUndeclared
CombineElementNotInNs = _libcombine.CombineElementNotInNs
CombineDuplicateComponentId = _libcombine.CombineDuplicateComponentId
CombineIdSyntaxRule = _libcombine.CombineIdSyntaxRule
CaInvalidMetaidSyntax = _libcombine.CaInvalidMetaidSyntax
InvalidNamespaceOnCa = _libcombine.InvalidNamespaceOnCa
AllowedAttributes = _libcombine.AllowedAttributes
CaEmptyListElement = _libcombine.CaEmptyListElement
CombineContentAllowedCoreAttributes = _libcombine.CombineContentAllowedCoreAttributes
CombineContentAllowedCoreElements = _libcombine.CombineContentAllowedCoreElements
CombineContentAllowedAttributes = _libcombine.CombineContentAllowedAttributes
CombineContentAllowedElements = _libcombine.CombineContentAllowedElements
CombineContentLocationMustBeString = _libcombine.CombineContentLocationMustBeString
CombineContentFormatMustBeString = _libcombine.CombineContentFormatMustBeString
CombineContentMasterMustBeBoolean = _libcombine.CombineContentMasterMustBeBoolean
CombineOmexManifestAllowedCoreAttributes = _libcombine.CombineOmexManifestAllowedCoreAttributes
CombineOmexManifestAllowedCoreElements = _libcombine.CombineOmexManifestAllowedCoreElements
CombineOmexManifestAllowedElements = _libcombine.CombineOmexManifestAllowedElements
CombineCrossRefAllowedCoreAttributes = _libcombine.CombineCrossRefAllowedCoreAttributes
CombineCrossRefAllowedCoreElements = _libcombine.CombineCrossRefAllowedCoreElements
CombineCrossRefAllowedAttributes = _libcombine.CombineCrossRefAllowedAttributes
CombineCrossRefLocationMustBeString = _libcombine.CombineCrossRefLocationMustBeString
CaUnknownCoreAttribute = _libcombine.CaUnknownCoreAttribute
CaCodesUpperBound = _libcombine.CaCodesUpperBound
LIBCOMBINE_CAT_INTERNAL = _libcombine.LIBCOMBINE_CAT_INTERNAL
LIBCOMBINE_CAT_SYSTEM = _libcombine.LIBCOMBINE_CAT_SYSTEM
LIBCOMBINE_CAT_XML = _libcombine.LIBCOMBINE_CAT_XML
LIBCOMBINE_CAT_OMEX = _libcombine.LIBCOMBINE_CAT_OMEX
LIBCOMBINE_CAT_GENERAL_CONSISTENCY = _libcombine.LIBCOMBINE_CAT_GENERAL_CONSISTENCY
LIBCOMBINE_CAT_IDENTIFIER_CONSISTENCY = _libcombine.LIBCOMBINE_CAT_IDENTIFIER_CONSISTENCY
LIBCOMBINE_CAT_MATHML_CONSISTENCY = _libcombine.LIBCOMBINE_CAT_MATHML_CONSISTENCY
LIBCOMBINE_CAT_INTERNAL_CONSISTENCY = _libcombine.LIBCOMBINE_CAT_INTERNAL_CONSISTENCY
LIBCOMBINE_SEV_WARNING = _libcombine.LIBCOMBINE_SEV_WARNING
LIBCOMBINE_SEV_ERROR = _libcombine.LIBCOMBINE_SEV_ERROR
LIBCOMBINE_SEV_FATAL = _libcombine.LIBCOMBINE_SEV_FATAL
LIBCOMBINE_SEV_SCHEMA_ERROR = _libcombine.LIBCOMBINE_SEV_SCHEMA_ERROR
LIBCOMBINE_SEV_GENERAL_WARNING = _libcombine.LIBCOMBINE_SEV_GENERAL_WARNING
LIBCOMBINE_SEV_NOT_APPLICABLE = _libcombine.LIBCOMBINE_SEV_NOT_APPLICABLE
class CaError(XMLError):
    """Proxy of C++ CaError class."""

    __swig_setmethods__ = {}
    for _s in [XMLError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaError, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CaError self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details, unsigned int const line=0, unsigned int const column=0, unsigned int const severity=LIBCOMBINE_SEV_ERROR, unsigned int const category=LIBCOMBINE_CAT_OMEX) -> CaError
        __init__(CaError self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details, unsigned int const line=0, unsigned int const column=0, unsigned int const severity=LIBCOMBINE_SEV_ERROR) -> CaError
        __init__(CaError self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details, unsigned int const line=0, unsigned int const column=0) -> CaError
        __init__(CaError self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details, unsigned int const line=0) -> CaError
        __init__(CaError self, unsigned int const errorId=0, unsigned int const level, unsigned int const version, string details) -> CaError
        __init__(CaError self, unsigned int const errorId=0, unsigned int const level, unsigned int const version) -> CaError
        __init__(CaError self, unsigned int const errorId=0, unsigned int const level) -> CaError
        __init__(CaError self, unsigned int const errorId=0) -> CaError
        __init__(CaError self) -> CaError
        __init__(CaError self, CaError orig) -> CaError
        """
        this = _libcombine.new_CaError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_CaError
    __del__ = lambda self: None
CaError_swigregister = _libcombine.CaError_swigregister
CaError_swigregister(CaError)

class CaNamespaces(_object):
    """Proxy of C++ CaNamespaces class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaNamespaces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaNamespaces, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libcombine.delete_CaNamespaces
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(CaNamespaces self, unsigned int level, unsigned int version) -> CaNamespaces
        __init__(CaNamespaces self, unsigned int level) -> CaNamespaces
        __init__(CaNamespaces self) -> CaNamespaces
        __init__(CaNamespaces self, CaNamespaces orig) -> CaNamespaces
        """
        this = _libcombine.new_CaNamespaces(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CaNamespaces self) -> CaNamespaces"""
        return _libcombine.CaNamespaces_clone(self)


    def getCaNamespaceURI(level, version):
        """getCaNamespaceURI(unsigned int level, unsigned int version) -> string"""
        return _libcombine.CaNamespaces_getCaNamespaceURI(level, version)

    getCaNamespaceURI = staticmethod(getCaNamespaceURI)

    def getSupportedNamespaces():
        """getSupportedNamespaces() -> List const *"""
        return _libcombine.CaNamespaces_getSupportedNamespaces()

    getSupportedNamespaces = staticmethod(getSupportedNamespaces)

    def freeCaNamespaces(supportedNS):
        """freeCaNamespaces(List * supportedNS)"""
        return _libcombine.CaNamespaces_freeCaNamespaces(supportedNS)

    freeCaNamespaces = staticmethod(freeCaNamespaces)

    def getURI(self):
        """getURI(CaNamespaces self) -> string"""
        return _libcombine.CaNamespaces_getURI(self)


    def getLevel(self, *args):
        """
        getLevel(CaNamespaces self) -> unsigned int
        getLevel(CaNamespaces self) -> unsigned int
        """
        return _libcombine.CaNamespaces_getLevel(self, *args)


    def getVersion(self, *args):
        """
        getVersion(CaNamespaces self) -> unsigned int
        getVersion(CaNamespaces self) -> unsigned int
        """
        return _libcombine.CaNamespaces_getVersion(self, *args)


    def getNamespaces(self, *args):
        """
        getNamespaces(CaNamespaces self) -> XMLNamespaces
        getNamespaces(CaNamespaces self) -> XMLNamespaces
        """
        return _libcombine.CaNamespaces_getNamespaces(self, *args)


    def addNamespaces(self, xmlns):
        """addNamespaces(CaNamespaces self, XMLNamespaces xmlns) -> int"""
        return _libcombine.CaNamespaces_addNamespaces(self, xmlns)


    def addNamespace(self, uri, prefix):
        """addNamespace(CaNamespaces self, string uri, string prefix) -> int"""
        return _libcombine.CaNamespaces_addNamespace(self, uri, prefix)


    def removeNamespace(self, uri):
        """removeNamespace(CaNamespaces self, string uri) -> int"""
        return _libcombine.CaNamespaces_removeNamespace(self, uri)


    def isCaNamespace(uri):
        """isCaNamespace(string uri) -> bool"""
        return _libcombine.CaNamespaces_isCaNamespace(uri)

    isCaNamespace = staticmethod(isCaNamespace)

    def isValidCombination(self):
        """isValidCombination(CaNamespaces self) -> bool"""
        return _libcombine.CaNamespaces_isValidCombination(self)


    def setLevel(self, level):
        """setLevel(CaNamespaces self, unsigned int level)"""
        return _libcombine.CaNamespaces_setLevel(self, level)


    def setVersion(self, version):
        """setVersion(CaNamespaces self, unsigned int version)"""
        return _libcombine.CaNamespaces_setVersion(self, version)


    def setNamespaces(self, xmlns):
        """setNamespaces(CaNamespaces self, XMLNamespaces xmlns)"""
        return _libcombine.CaNamespaces_setNamespaces(self, xmlns)


    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

CaNamespaces_swigregister = _libcombine.CaNamespaces_swigregister
CaNamespaces_swigregister(CaNamespaces)

def CaNamespaces_getCaNamespaceURI(level, version):
    """CaNamespaces_getCaNamespaceURI(unsigned int level, unsigned int version) -> string"""
    return _libcombine.CaNamespaces_getCaNamespaceURI(level, version)

def CaNamespaces_getSupportedNamespaces():
    """CaNamespaces_getSupportedNamespaces() -> List const *"""
    return _libcombine.CaNamespaces_getSupportedNamespaces()

def CaNamespaces_freeCaNamespaces(supportedNS):
    """CaNamespaces_freeCaNamespaces(List * supportedNS)"""
    return _libcombine.CaNamespaces_freeCaNamespaces(supportedNS)

def CaNamespaces_isCaNamespace(uri):
    """CaNamespaces_isCaNamespace(string uri) -> bool"""
    return _libcombine.CaNamespaces_isCaNamespace(uri)

class CaContent(CaBase):
    """Proxy of C++ CaContent class."""

    __swig_setmethods__ = {}
    for _s in [CaBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaContent, name, value)
    __swig_getmethods__ = {}
    for _s in [CaBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaContent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CaContent self) -> CaContent
        __init__(CaContent self, CaNamespaces omexns) -> CaContent
        __init__(CaContent self, CaContent orig) -> CaContent
        """
        this = _libcombine.new_CaContent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CaContent self) -> CaContent"""
        return _libcombine.CaContent_clone(self)

    __swig_destroy__ = _libcombine.delete_CaContent
    __del__ = lambda self: None

    def getLocation(self):
        """getLocation(CaContent self) -> string"""
        return _libcombine.CaContent_getLocation(self)


    def getFormat(self):
        """getFormat(CaContent self) -> string"""
        return _libcombine.CaContent_getFormat(self)


    def isFormat(self, formatKey):
        """isFormat(CaContent self, string formatKey) -> bool"""
        return _libcombine.CaContent_isFormat(self, formatKey)


    def getMaster(self):
        """getMaster(CaContent self) -> bool"""
        return _libcombine.CaContent_getMaster(self)


    def isSetLocation(self):
        """isSetLocation(CaContent self) -> bool"""
        return _libcombine.CaContent_isSetLocation(self)


    def isSetFormat(self):
        """isSetFormat(CaContent self) -> bool"""
        return _libcombine.CaContent_isSetFormat(self)


    def isSetMaster(self):
        """isSetMaster(CaContent self) -> bool"""
        return _libcombine.CaContent_isSetMaster(self)


    def setLocation(self, location):
        """setLocation(CaContent self, string location) -> int"""
        return _libcombine.CaContent_setLocation(self, location)


    def setFormat(self, format):
        """setFormat(CaContent self, string format) -> int"""
        return _libcombine.CaContent_setFormat(self, format)


    def setMaster(self, master):
        """setMaster(CaContent self, bool master) -> int"""
        return _libcombine.CaContent_setMaster(self, master)


    def unsetLocation(self):
        """unsetLocation(CaContent self) -> int"""
        return _libcombine.CaContent_unsetLocation(self)


    def unsetFormat(self):
        """unsetFormat(CaContent self) -> int"""
        return _libcombine.CaContent_unsetFormat(self)


    def unsetMaster(self):
        """unsetMaster(CaContent self) -> int"""
        return _libcombine.CaContent_unsetMaster(self)


    def getListOfCrossRefs(self, *args):
        """
        getListOfCrossRefs(CaContent self) -> CaListOfCrossRefs
        getListOfCrossRefs(CaContent self) -> CaListOfCrossRefs
        """
        return _libcombine.CaContent_getListOfCrossRefs(self, *args)


    def getCrossRef(self, *args):
        """
        getCrossRef(CaContent self, unsigned int n) -> CaCrossRef
        getCrossRef(CaContent self, unsigned int n) -> CaCrossRef
        """
        return _libcombine.CaContent_getCrossRef(self, *args)


    def addCrossRef(self, ccr):
        """addCrossRef(CaContent self, CaCrossRef ccr) -> int"""
        return _libcombine.CaContent_addCrossRef(self, ccr)


    def getNumCrossRefs(self):
        """getNumCrossRefs(CaContent self) -> unsigned int"""
        return _libcombine.CaContent_getNumCrossRefs(self)


    def createCrossRef(self):
        """createCrossRef(CaContent self) -> CaCrossRef"""
        return _libcombine.CaContent_createCrossRef(self)


    def removeCrossRef(self, n):
        """removeCrossRef(CaContent self, unsigned int n) -> CaCrossRef"""
        return _libcombine.CaContent_removeCrossRef(self, n)


    def getElementName(self):
        """getElementName(CaContent self) -> string"""
        return _libcombine.CaContent_getElementName(self)


    def getTypeCode(self):
        """getTypeCode(CaContent self) -> int"""
        return _libcombine.CaContent_getTypeCode(self)


    def hasRequiredAttributes(self):
        """hasRequiredAttributes(CaContent self) -> bool"""
        return _libcombine.CaContent_hasRequiredAttributes(self)


    def connectToChild(self):
        """connectToChild(CaContent self)"""
        return _libcombine.CaContent_connectToChild(self)


    def getElementBySId(self, id):
        """getElementBySId(CaContent self, string id) -> CaBase"""
        return _libcombine.CaContent_getElementBySId(self, id)

CaContent_swigregister = _libcombine.CaContent_swigregister
CaContent_swigregister(CaContent)

class CaCrossRef(CaBase):
    """Proxy of C++ CaCrossRef class."""

    __swig_setmethods__ = {}
    for _s in [CaBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaCrossRef, name, value)
    __swig_getmethods__ = {}
    for _s in [CaBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaCrossRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CaCrossRef self) -> CaCrossRef
        __init__(CaCrossRef self, CaNamespaces omexns) -> CaCrossRef
        __init__(CaCrossRef self, CaCrossRef orig) -> CaCrossRef
        """
        this = _libcombine.new_CaCrossRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CaCrossRef self) -> CaCrossRef"""
        return _libcombine.CaCrossRef_clone(self)

    __swig_destroy__ = _libcombine.delete_CaCrossRef
    __del__ = lambda self: None

    def getLocation(self):
        """getLocation(CaCrossRef self) -> string"""
        return _libcombine.CaCrossRef_getLocation(self)


    def isSetLocation(self):
        """isSetLocation(CaCrossRef self) -> bool"""
        return _libcombine.CaCrossRef_isSetLocation(self)


    def setLocation(self, location):
        """setLocation(CaCrossRef self, string location) -> int"""
        return _libcombine.CaCrossRef_setLocation(self, location)


    def unsetLocation(self):
        """unsetLocation(CaCrossRef self) -> int"""
        return _libcombine.CaCrossRef_unsetLocation(self)


    def getElementName(self):
        """getElementName(CaCrossRef self) -> string"""
        return _libcombine.CaCrossRef_getElementName(self)


    def getTypeCode(self):
        """getTypeCode(CaCrossRef self) -> int"""
        return _libcombine.CaCrossRef_getTypeCode(self)


    def hasRequiredAttributes(self):
        """hasRequiredAttributes(CaCrossRef self) -> bool"""
        return _libcombine.CaCrossRef_hasRequiredAttributes(self)

CaCrossRef_swigregister = _libcombine.CaCrossRef_swigregister
CaCrossRef_swigregister(CaCrossRef)

class CaListOfContents(CaListOf):
    """Proxy of C++ CaListOfContents class."""

    __swig_setmethods__ = {}
    for _s in [CaListOf]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaListOfContents, name, value)
    __swig_getmethods__ = {}
    for _s in [CaListOf]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaListOfContents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CaListOfContents self) -> CaListOfContents
        __init__(CaListOfContents self, CaNamespaces omexns) -> CaListOfContents
        __init__(CaListOfContents self, CaListOfContents orig) -> CaListOfContents
        """
        this = _libcombine.new_CaListOfContents(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CaListOfContents self) -> CaListOfContents"""
        return _libcombine.CaListOfContents_clone(self)

    __swig_destroy__ = _libcombine.delete_CaListOfContents
    __del__ = lambda self: None

    def get(self, *args):
        """
        get(CaListOfContents self, unsigned int n) -> CaContent
        get(CaListOfContents self, unsigned int n) -> CaContent
        get(CaListOfContents self, string sid) -> CaContent
        get(CaListOfContents self, string sid) -> CaContent
        """
        return _libcombine.CaListOfContents_get(self, *args)


    def remove(self, *args):
        """
        remove(CaListOfContents self, unsigned int n) -> CaContent
        remove(CaListOfContents self, string sid) -> CaContent
        """
        return _libcombine.CaListOfContents_remove(self, *args)


    def addContent(self, cc):
        """addContent(CaListOfContents self, CaContent cc) -> int"""
        return _libcombine.CaListOfContents_addContent(self, cc)


    def getNumContents(self):
        """getNumContents(CaListOfContents self) -> unsigned int"""
        return _libcombine.CaListOfContents_getNumContents(self)


    def createContent(self):
        """createContent(CaListOfContents self) -> CaContent"""
        return _libcombine.CaListOfContents_createContent(self)


    def getElementName(self):
        """getElementName(CaListOfContents self) -> string"""
        return _libcombine.CaListOfContents_getElementName(self)


    def getTypeCode(self):
        """getTypeCode(CaListOfContents self) -> int"""
        return _libcombine.CaListOfContents_getTypeCode(self)


    def getItemTypeCode(self):
        """getItemTypeCode(CaListOfContents self) -> int"""
        return _libcombine.CaListOfContents_getItemTypeCode(self)

CaListOfContents_swigregister = _libcombine.CaListOfContents_swigregister
CaListOfContents_swigregister(CaListOfContents)

class CaListOfCrossRefs(CaListOf):
    """Proxy of C++ CaListOfCrossRefs class."""

    __swig_setmethods__ = {}
    for _s in [CaListOf]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaListOfCrossRefs, name, value)
    __swig_getmethods__ = {}
    for _s in [CaListOf]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CaListOfCrossRefs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CaListOfCrossRefs self) -> CaListOfCrossRefs
        __init__(CaListOfCrossRefs self, CaNamespaces omexns) -> CaListOfCrossRefs
        __init__(CaListOfCrossRefs self, CaListOfCrossRefs orig) -> CaListOfCrossRefs
        """
        this = _libcombine.new_CaListOfCrossRefs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        """clone(CaListOfCrossRefs self) -> CaListOfCrossRefs"""
        return _libcombine.CaListOfCrossRefs_clone(self)

    __swig_destroy__ = _libcombine.delete_CaListOfCrossRefs
    __del__ = lambda self: None

    def get(self, *args):
        """
        get(CaListOfCrossRefs self, unsigned int n) -> CaCrossRef
        get(CaListOfCrossRefs self, unsigned int n) -> CaCrossRef
        get(CaListOfCrossRefs self, string sid) -> CaCrossRef
        get(CaListOfCrossRefs self, string sid) -> CaCrossRef
        """
        return _libcombine.CaListOfCrossRefs_get(self, *args)


    def remove(self, *args):
        """
        remove(CaListOfCrossRefs self, unsigned int n) -> CaCrossRef
        remove(CaListOfCrossRefs self, string sid) -> CaCrossRef
        """
        return _libcombine.CaListOfCrossRefs_remove(self, *args)


    def addCrossRef(self, ccr):
        """addCrossRef(CaListOfCrossRefs self, CaCrossRef ccr) -> int"""
        return _libcombine.CaListOfCrossRefs_addCrossRef(self, ccr)


    def getNumCrossRefs(self):
        """getNumCrossRefs(CaListOfCrossRefs self) -> unsigned int"""
        return _libcombine.CaListOfCrossRefs_getNumCrossRefs(self)


    def createCrossRef(self):
        """createCrossRef(CaListOfCrossRefs self) -> CaCrossRef"""
        return _libcombine.CaListOfCrossRefs_createCrossRef(self)


    def getElementName(self):
        """getElementName(CaListOfCrossRefs self) -> string"""
        return _libcombine.CaListOfCrossRefs_getElementName(self)


    def getTypeCode(self):
        """getTypeCode(CaListOfCrossRefs self) -> int"""
        return _libcombine.CaListOfCrossRefs_getTypeCode(self)


    def getItemTypeCode(self):
        """getItemTypeCode(CaListOfCrossRefs self) -> int"""
        return _libcombine.CaListOfCrossRefs_getItemTypeCode(self)

CaListOfCrossRefs_swigregister = _libcombine.CaListOfCrossRefs_swigregister
CaListOfCrossRefs_swigregister(CaListOfCrossRefs)

class CombineArchive(_object):
    """Proxy of C++ CombineArchive class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombineArchive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CombineArchive, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CombineArchive self) -> CombineArchive"""
        this = _libcombine.new_CombineArchive()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_CombineArchive
    __del__ = lambda self: None

    def addFile(self, *args):
        """
        addFile(CombineArchive self, string fileName, string targetName, string format, bool isMaster=False) -> bool
        addFile(CombineArchive self, string fileName, string targetName, string format) -> bool
        addFile(CombineArchive self, std::istream & stream, string targetName, string format, bool isMaster=False) -> bool
        addFile(CombineArchive self, std::istream & stream, string targetName, string format) -> bool
        """
        return _libcombine.CombineArchive_addFile(self, *args)


    def addFileFromString(self, content, targetName, format, isMaster=False):
        """
        addFileFromString(CombineArchive self, string content, string targetName, string format, bool isMaster=False) -> bool
        addFileFromString(CombineArchive self, string content, string targetName, string format) -> bool
        """
        return _libcombine.CombineArchive_addFileFromString(self, content, targetName, format, isMaster)


    def addMetadata(self, targetName, description):
        """addMetadata(CombineArchive self, string targetName, OmexDescription description) -> int"""
        return _libcombine.CombineArchive_addMetadata(self, targetName, description)


    def extractEntry(self, *args):
        """
        extractEntry(CombineArchive self, string name, string destination) -> bool
        extractEntry(CombineArchive self, string name) -> bool
        """
        return _libcombine.CombineArchive_extractEntry(self, *args)


    def extractEntryToStream(self, name, stream):
        """extractEntryToStream(CombineArchive self, string name, ostream stream) -> bool"""
        return _libcombine.CombineArchive_extractEntryToStream(self, name, stream)


    def extractEntryToString(self, name):
        """extractEntryToString(CombineArchive self, string name) -> string"""
        return _libcombine.CombineArchive_extractEntryToString(self, name)


    def extractTo(self, directory):
        """extractTo(CombineArchive self, string directory) -> bool"""
        return _libcombine.CombineArchive_extractTo(self, directory)


    def initializeFromDirectory(self, directory):
        """initializeFromDirectory(CombineArchive self, string directory) -> bool"""
        return _libcombine.CombineArchive_initializeFromDirectory(self, directory)


    def initializeFromArchive(self, archiveFile, skipOmex=False):
        """
        initializeFromArchive(CombineArchive self, string archiveFile, bool skipOmex=False) -> bool
        initializeFromArchive(CombineArchive self, string archiveFile) -> bool
        """
        return _libcombine.CombineArchive_initializeFromArchive(self, archiveFile, skipOmex)


    def getManifest(self, *args):
        """
        getManifest(CombineArchive self) -> CaOmexManifest
        getManifest(CombineArchive self) -> CaOmexManifest
        """
        return _libcombine.CombineArchive_getManifest(self, *args)


    def getMasterFile(self, *args):
        """
        getMasterFile(CombineArchive self) -> CaContent
        getMasterFile(CombineArchive self, string formatKey) -> CaContent
        """
        return _libcombine.CombineArchive_getMasterFile(self, *args)


    def getEntryByFormat(self, formatKey):
        """getEntryByFormat(CombineArchive self, string formatKey) -> CaContent"""
        return _libcombine.CombineArchive_getEntryByFormat(self, formatKey)


    def getEntryByLocation(self, location):
        """getEntryByLocation(CombineArchive self, string location) -> CaContent"""
        return _libcombine.CombineArchive_getEntryByLocation(self, location)


    def getAllLocations(self):
        """getAllLocations(CombineArchive self) -> StringVector"""
        return _libcombine.CombineArchive_getAllLocations(self)


    def getNumEntries(self):
        """getNumEntries(CombineArchive self) -> int"""
        return _libcombine.CombineArchive_getNumEntries(self)


    def getEntry(self, index):
        """getEntry(CombineArchive self, int index) -> CaContent"""
        return _libcombine.CombineArchive_getEntry(self, index)


    def getMetadataForLocation(self, location):
        """getMetadataForLocation(CombineArchive self, string location) -> OmexDescription"""
        return _libcombine.CombineArchive_getMetadataForLocation(self, location)


    def hasMetadataForLocation(self, location):
        """hasMetadataForLocation(CombineArchive self, string location) -> bool"""
        return _libcombine.CombineArchive_hasMetadataForLocation(self, location)


    def setManifest(self, value):
        """setManifest(CombineArchive self, CaOmexManifest value)"""
        return _libcombine.CombineArchive_setManifest(self, value)


    def cleanUp(self):
        """cleanUp(CombineArchive self) -> bool"""
        return _libcombine.CombineArchive_cleanUp(self)


    def writeToFile(self, fileName):
        """writeToFile(CombineArchive self, string fileName) -> bool"""
        return _libcombine.CombineArchive_writeToFile(self, fileName)


    def getStream(self, name, stream):
        """getStream(CombineArchive self, string name, std::ifstream & stream) -> bool"""
        return _libcombine.CombineArchive_getStream(self, name, stream)

CombineArchive_swigregister = _libcombine.CombineArchive_swigregister
CombineArchive_swigregister(CombineArchive)

class KnownFormats(_object):
    """Proxy of C++ KnownFormats class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KnownFormats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KnownFormats, name)
    __repr__ = _swig_repr

    def isFormat(formatKey, format):
        """isFormat(string formatKey, string format) -> bool"""
        return _libcombine.KnownFormats_isFormat(formatKey, format)

    isFormat = staticmethod(isFormat)

    def lookupFormat(formatKey):
        """lookupFormat(string formatKey) -> string"""
        return _libcombine.KnownFormats_lookupFormat(formatKey)

    lookupFormat = staticmethod(lookupFormat)

    def guessFormat(fileName):
        """guessFormat(string fileName) -> string"""
        return _libcombine.KnownFormats_guessFormat(fileName)

    guessFormat = staticmethod(guessFormat)

    def addKnownFormat(formatKey, format):
        """addKnownFormat(string formatKey, string format)"""
        return _libcombine.KnownFormats_addKnownFormat(formatKey, format)

    addKnownFormat = staticmethod(addKnownFormat)

    def getFormatKeys():
        """getFormatKeys() -> StringVector"""
        return _libcombine.KnownFormats_getFormatKeys()

    getFormatKeys = staticmethod(getFormatKeys)

    def getKnownFormats():
        """getKnownFormats() -> std::map< std::string,std::vector< std::string,std::allocator< std::string > > > &"""
        return _libcombine.KnownFormats_getKnownFormats()

    getKnownFormats = staticmethod(getKnownFormats)

    def __init__(self):
        """__init__(KnownFormats self) -> KnownFormats"""
        this = _libcombine.new_KnownFormats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_KnownFormats
    __del__ = lambda self: None
KnownFormats_swigregister = _libcombine.KnownFormats_swigregister
KnownFormats_swigregister(KnownFormats)

def KnownFormats_isFormat(formatKey, format):
    """KnownFormats_isFormat(string formatKey, string format) -> bool"""
    return _libcombine.KnownFormats_isFormat(formatKey, format)

def KnownFormats_lookupFormat(formatKey):
    """KnownFormats_lookupFormat(string formatKey) -> string"""
    return _libcombine.KnownFormats_lookupFormat(formatKey)

def KnownFormats_guessFormat(fileName):
    """KnownFormats_guessFormat(string fileName) -> string"""
    return _libcombine.KnownFormats_guessFormat(fileName)

def KnownFormats_addKnownFormat(formatKey, format):
    """KnownFormats_addKnownFormat(string formatKey, string format)"""
    return _libcombine.KnownFormats_addKnownFormat(formatKey, format)

def KnownFormats_getFormatKeys():
    """KnownFormats_getFormatKeys() -> StringVector"""
    return _libcombine.KnownFormats_getFormatKeys()

def KnownFormats_getKnownFormats():
    """KnownFormats_getKnownFormats() -> std::map< std::string,std::vector< std::string,std::allocator< std::string > > > &"""
    return _libcombine.KnownFormats_getKnownFormats()
KnownFormats.PURL_MEDIATYPES_URL = _libcombine.cvar.KnownFormats_PURL_MEDIATYPES_URL

class OmexDescription(_object):
    """Proxy of C++ OmexDescription class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OmexDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OmexDescription, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(OmexDescription self) -> OmexDescription
        __init__(OmexDescription self, XMLInputStream stream) -> OmexDescription
        """
        this = _libcombine.new_OmexDescription(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getRdfNS():
        """getRdfNS() -> string"""
        return _libcombine.OmexDescription_getRdfNS()

    getRdfNS = staticmethod(getRdfNS)

    def getDcNS():
        """getDcNS() -> string"""
        return _libcombine.OmexDescription_getDcNS()

    getDcNS = staticmethod(getDcNS)

    def parseFile(fileName):
        """parseFile(string fileName) -> MetadataVector"""
        return _libcombine.OmexDescription_parseFile(fileName)

    parseFile = staticmethod(parseFile)

    def parseString(xml):
        """parseString(string xml) -> MetadataVector"""
        return _libcombine.OmexDescription_parseString(xml)

    parseString = staticmethod(parseString)

    def readFrom(stream):
        """readFrom(XMLInputStream stream) -> MetadataVector"""
        return _libcombine.OmexDescription_readFrom(stream)

    readFrom = staticmethod(readFrom)

    def isEmpty(self):
        """isEmpty(OmexDescription self) -> bool"""
        return _libcombine.OmexDescription_isEmpty(self)


    def getDescription(self):
        """getDescription(OmexDescription self) -> string"""
        return _libcombine.OmexDescription_getDescription(self)


    def setDescription(self, description):
        """setDescription(OmexDescription self, string description)"""
        return _libcombine.OmexDescription_setDescription(self, description)


    def getAbout(self):
        """getAbout(OmexDescription self) -> string"""
        return _libcombine.OmexDescription_getAbout(self)


    def setAbout(self, about):
        """setAbout(OmexDescription self, string about)"""
        return _libcombine.OmexDescription_setAbout(self, about)


    def getCreators(self, *args):
        """
        getCreators(OmexDescription self) -> VCardVector
        getCreators(OmexDescription self) -> VCardVector
        """
        return _libcombine.OmexDescription_getCreators(self, *args)


    def getNumCreators(self):
        """getNumCreators(OmexDescription self) -> size_t"""
        return _libcombine.OmexDescription_getNumCreators(self)


    def setCreators(self, creators):
        """setCreators(OmexDescription self, VCardVector creators)"""
        return _libcombine.OmexDescription_setCreators(self, creators)


    def addCreator(self, creator):
        """addCreator(OmexDescription self, VCard creator)"""
        return _libcombine.OmexDescription_addCreator(self, creator)


    def getCreated(self, *args):
        """
        getCreated(OmexDescription self) -> Date
        getCreated(OmexDescription self) -> Date
        """
        return _libcombine.OmexDescription_getCreated(self, *args)


    def getCreator(self, index):
        """getCreator(OmexDescription self, unsigned int index) -> VCard"""
        return _libcombine.OmexDescription_getCreator(self, index)


    def setCreated(self, created):
        """setCreated(OmexDescription self, Date created)"""
        return _libcombine.OmexDescription_setCreated(self, created)


    def getCurrentDateAndTime():
        """getCurrentDateAndTime() -> Date"""
        return _libcombine.OmexDescription_getCurrentDateAndTime()

    getCurrentDateAndTime = staticmethod(getCurrentDateAndTime)

    def getModified(self, *args):
        """
        getModified(OmexDescription self) -> DateVector
        getModified(OmexDescription self) -> DateVector
        getModified(OmexDescription self, int index) -> Date
        """
        return _libcombine.OmexDescription_getModified(self, *args)


    def getNumModified(self):
        """getNumModified(OmexDescription self) -> size_t"""
        return _libcombine.OmexDescription_getNumModified(self)


    def setModified(self, modified):
        """setModified(OmexDescription self, DateVector modified)"""
        return _libcombine.OmexDescription_setModified(self, modified)


    def addModification(self, date):
        """addModification(OmexDescription self, Date date)"""
        return _libcombine.OmexDescription_addModification(self, date)


    def writeToFile(self, fileName):
        """writeToFile(OmexDescription self, string fileName)"""
        return _libcombine.OmexDescription_writeToFile(self, fileName)


    def toXML(self, omitDeclaration=False):
        """
        toXML(OmexDescription self, bool omitDeclaration=False) -> string
        toXML(OmexDescription self) -> string
        """
        return _libcombine.OmexDescription_toXML(self, omitDeclaration)

    __swig_destroy__ = _libcombine.delete_OmexDescription
    __del__ = lambda self: None
OmexDescription_swigregister = _libcombine.OmexDescription_swigregister
OmexDescription_swigregister(OmexDescription)

def OmexDescription_getRdfNS():
    """OmexDescription_getRdfNS() -> string"""
    return _libcombine.OmexDescription_getRdfNS()

def OmexDescription_getDcNS():
    """OmexDescription_getDcNS() -> string"""
    return _libcombine.OmexDescription_getDcNS()

def OmexDescription_parseFile(fileName):
    """OmexDescription_parseFile(string fileName) -> MetadataVector"""
    return _libcombine.OmexDescription_parseFile(fileName)

def OmexDescription_parseString(xml):
    """OmexDescription_parseString(string xml) -> MetadataVector"""
    return _libcombine.OmexDescription_parseString(xml)

def OmexDescription_readFrom(stream):
    """OmexDescription_readFrom(XMLInputStream stream) -> MetadataVector"""
    return _libcombine.OmexDescription_readFrom(stream)

def OmexDescription_getCurrentDateAndTime():
    """OmexDescription_getCurrentDateAndTime() -> Date"""
    return _libcombine.OmexDescription_getCurrentDateAndTime()

class Util(_object):
    """Proxy of C++ Util class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Util, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Util, name)
    __repr__ = _swig_repr

    def getTempPath():
        """getTempPath() -> string"""
        return _libcombine.Util_getTempPath()

    getTempPath = staticmethod(getTempPath)

    def getTempFilename(*args):
        """
        getTempFilename(string prefix, string ext) -> string
        getTempFilename(string prefix) -> string
        getTempFilename() -> string
        """
        return _libcombine.Util_getTempFilename(*args)

    getTempFilename = staticmethod(getTempFilename)

    def getCurrentMilliseconds():
        """getCurrentMilliseconds() -> unsigned long"""
        return _libcombine.Util_getCurrentMilliseconds()

    getCurrentMilliseconds = staticmethod(getCurrentMilliseconds)

    def copyFile(source, destination):
        """copyFile(string source, string destination)"""
        return _libcombine.Util_copyFile(source, destination)

    copyFile = staticmethod(copyFile)

    def copyStream(arg1, out):
        """copyStream(std::istream & arg1, ostream out)"""
        return _libcombine.Util_copyStream(arg1, out)

    copyStream = staticmethod(copyStream)

    def getExtension(fileName):
        """getExtension(string fileName) -> string"""
        return _libcombine.Util_getExtension(fileName)

    getExtension = staticmethod(getExtension)

    def removeFileOrFolder(path):
        """removeFileOrFolder(string path) -> bool"""
        return _libcombine.Util_removeFileOrFolder(path)

    removeFileOrFolder = staticmethod(removeFileOrFolder)

    def __init__(self):
        """__init__(Util self) -> Util"""
        this = _libcombine.new_Util()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libcombine.delete_Util
    __del__ = lambda self: None
Util_swigregister = _libcombine.Util_swigregister
Util_swigregister(Util)

def Util_getTempPath():
    """Util_getTempPath() -> string"""
    return _libcombine.Util_getTempPath()

def Util_getTempFilename(*args):
    """
    getTempFilename(string prefix, string ext) -> string
    getTempFilename(string prefix) -> string
    Util_getTempFilename() -> string
    """
    return _libcombine.Util_getTempFilename(*args)

def Util_getCurrentMilliseconds():
    """Util_getCurrentMilliseconds() -> unsigned long"""
    return _libcombine.Util_getCurrentMilliseconds()

def Util_copyFile(source, destination):
    """Util_copyFile(string source, string destination)"""
    return _libcombine.Util_copyFile(source, destination)

def Util_copyStream(arg2, out):
    """Util_copyStream(std::istream & arg2, ostream out)"""
    return _libcombine.Util_copyStream(arg2, out)

def Util_getExtension(fileName):
    """Util_getExtension(string fileName) -> string"""
    return _libcombine.Util_getExtension(fileName)

def Util_removeFileOrFolder(path):
    """Util_removeFileOrFolder(string path) -> bool"""
    return _libcombine.Util_removeFileOrFolder(path)

class VCard(_object):
    """Proxy of C++ VCard class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VCard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VCard, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(VCard self) -> VCard
        __init__(VCard self, VCard other) -> VCard
        __init__(VCard self, XMLInputStream stream, XMLToken current) -> VCard
        """
        this = _libcombine.new_VCard(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEmpty(self):
        """isEmpty(VCard self) -> bool"""
        return _libcombine.VCard_isEmpty(self)


    def toXML(self):
        """toXML(VCard self) -> string"""
        return _libcombine.VCard_toXML(self)


    def getFamilyName(self):
        """getFamilyName(VCard self) -> string"""
        return _libcombine.VCard_getFamilyName(self)


    def setFamilyName(self, familyName):
        """setFamilyName(VCard self, string familyName)"""
        return _libcombine.VCard_setFamilyName(self, familyName)


    def getGivenName(self):
        """getGivenName(VCard self) -> string"""
        return _libcombine.VCard_getGivenName(self)


    def setGivenName(self, givenName):
        """setGivenName(VCard self, string givenName)"""
        return _libcombine.VCard_setGivenName(self, givenName)


    def getEmail(self):
        """getEmail(VCard self) -> string"""
        return _libcombine.VCard_getEmail(self)


    def setEmail(self, email):
        """setEmail(VCard self, string email)"""
        return _libcombine.VCard_setEmail(self, email)


    def getOrganization(self):
        """getOrganization(VCard self) -> string"""
        return _libcombine.VCard_getOrganization(self)


    def setOrganization(self, organization):
        """setOrganization(VCard self, string organization)"""
        return _libcombine.VCard_setOrganization(self, organization)

    __swig_destroy__ = _libcombine.delete_VCard
    __del__ = lambda self: None
VCard_swigregister = _libcombine.VCard_swigregister
VCard_swigregister(VCard)

# This file is compatible with both classic and new-style classes.



global __version__
__version__ = '0.2.15'
