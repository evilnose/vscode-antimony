# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SettingTestsSwigAPI
else:
    import _SettingTestsSwigAPI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SettingTestsSwigAPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SettingTestsSwigAPI.SettingTestsSwigAPI_swiginit(self, _SettingTestsSwigAPI.new_SettingTestsSwigAPI())

    def getStringTypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getStringTypeAsSetting(self)

    def setStringType(self, stringType: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setStringType(self, stringType)

    def getBoolTypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getBoolTypeAsSetting(self)

    def setBoolType(self, boolType: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setBoolType(self, boolType)

    def getInt32TypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getInt32TypeAsSetting(self)

    def setInt32Type(self, int32Type: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setInt32Type(self, int32Type)

    def getUint32TypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getUint32TypeAsSetting(self)

    def setUint32Type(self, uint32Type: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setUint32Type(self, uint32Type)

    def getInt64TypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getInt64TypeAsSetting(self)

    def setInt64Type(self, int64Type: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setInt64Type(self, int64Type)

    def getUint64TypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getUint64TypeAsSetting(self)

    def setUint64Type(self, uint64Type: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setUint64Type(self, uint64Type)

    def getFloatTypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getFloatTypeAsSetting(self)

    def setFloatType(self, floatType: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setFloatType(self, floatType)

    def getDoubleTypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getDoubleTypeAsSetting(self)

    def setDoubleType(self, doubleType: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setDoubleType(self, doubleType)

    def getCharTypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getCharTypeAsSetting(self)

    def setCharType(self, charType: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setCharType(self, charType)

    def getUCharTypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getUCharTypeAsSetting(self)

    def setUCharType(self, uCharType: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setUCharType(self, uCharType)

    def getDoubleVectorTypeAsSetting(self) -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getDoubleVectorTypeAsSetting(self)

    def setDoubleVectorType(self, doubleVectorType: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setDoubleVectorType(self, doubleVectorType)

    def getValueFromSettings(self, key: "std::string const &") -> "rr::Setting":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_getValueFromSettings(self, key)

    def setValueInSettings(self, key: "std::string const &", value: "rr::Setting") -> "void":
        return _SettingTestsSwigAPI.SettingTestsSwigAPI_setValueInSettings(self, key, value)
    __swig_destroy__ = _SettingTestsSwigAPI.delete_SettingTestsSwigAPI

# Register SettingTestsSwigAPI in _SettingTestsSwigAPI:
_SettingTestsSwigAPI.SettingTestsSwigAPI_swigregister(SettingTestsSwigAPI)



