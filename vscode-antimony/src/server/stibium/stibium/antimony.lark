
var_name : ["$"] NAME
in_comp : "in" var_name
namemaybein : var_name [in_comp]

empty:
reaction_name : namemaybein ":"
reaction : [reaction_name] species_list ARROW [species_list] ";" sum [in_comp]
    | [reaction_name] [species_list] ARROW species_list ";" sum [in_comp]
species_list : species ("+" species)*
species : [NUMBER] ["$"] NAME
ARROW : "->"
    | "=>"

assignment : namemaybein ("=" | AEQ) sum [unit_sum]

AEQ : ":="

annotation : var_name ANNOT_KEYWORD ESCAPED_STRING
ANNOT_KEYWORD: "identity" | "hasPart"


declaration : decl_modifiers decl_item ("," decl_item)*
decl_modifiers : VAR_MODIFIER
    | TYPE_MODIFIER
    | VAR_MODIFIER TYPE_MODIFIER
decl_item : namemaybein [decl_assignment]
decl_assignment : "=" sum [unit_sum]

// unit
// builtin_unit : ("liter" | "mole" | "second" | "item" | "meter" | "liters" | "moles" | "seconds" | "items" | "meters")

unit : NAME

unit_declaration : "unit" var_name "=" unit_sum
unit_sum : unit_sum "*" unit_atom
        | unit_sum "/" unit_atom
        | unit_sum "^" unit_atom
        | unit_atom
unit_atom : NUMBER NAME
        | NAME
        // | NUMBER builtin_unit
        | "(" unit_sum ")"

unit_assignment : var_name "has" unit_sum

// this should not be a reaction name, I'm just being lazy
mmodel_call : [reaction_name] NAME "(" [parameters] ")"

function_call : namemaybein ("=" | AEQ) NAME "(" [parameters] ")"

VAR_MODIFIER: /\b(var|const)\b/
TYPE_MODIFIER: /\b(species|compartment|formula)\b/

?sum : product
    | sum "+" product
    | sum "-" product

?product : power
    | product "*" power
    | product "/" power

?power: atom
    | power "^" atom

?atom : NUMBER
    | var_name
    | "-" atom
    | "+" atom
    | "(" sum ")"


// optimizations possible when there are multiple empty lines
// example: https://docs.python.org/3/reference/grammar.html
// Now note that NEWLINE is already doing that, but ";" is not
?simple_stmt : [small_stmt] (";" | NEWLINE)
?small_stmt : reaction
    | assignment
    | declaration
    | annotation
    | unit_declaration
    | unit_assignment
    | mmodel_call
    | function_call
    | variable_in

simple_stmt_list : simple_stmt+

// For some reason we need to have at least one suite in the model, even if it is just
// a newline or a semicolon
model : ("model" | "module") NAME simple_stmt_list END

// Modular Model
modular_model : "model" NAME "(" [parameters] ")" simple_stmt_list END

// Function
function : "function" NAME "(" [parameters] ")" NEWLINE sum NEWLINE END

parameters : NAME ("," NAME)*

variable_in : var_name in_comp

END : "end"

COMMENT: "/*" /(.|\n)*/ "*/"
    | "#" /.*/
    | "//" /.*/


// TODO rename to 'file'
root : (simple_stmt | model | function | modular_model)*


// negative lookahead to avoid matching keywords (note the word boundaries)
// NAME : /(?!\b(var|const|compartment|species|formula|function|end|model|litre|mole|second|item|meter|litres|moles|seconds|"items"|"meters")\b)/ CNAME
NAME : /(?!\b(var|const|compartment|species|formula|function|end|model)\b)/ ["*"] CNAME

%import common.CNAME
%import common.NUMBER
%import common.WS
%import common.WS_INLINE
%import common.NEWLINE
%import common.ESCAPED_STRING
%import common.WORD
%ignore WS_INLINE
%ignore COMMENT
